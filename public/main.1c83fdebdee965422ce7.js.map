{"version":3,"file":"main.1c83fdebdee965422ce7.js","mappings":"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","sources":["webpack://zeropoint-node/webpack/runtime/chunk loaded","webpack://zeropoint-node/./src/laws/MetaphysicalLawRegistry.ts","webpack://zeropoint-node/./src/consciousness/ConsciousnessField.ts","webpack://zeropoint-node/./src/stimulus/controllers/MetaphysicalController.ts","webpack://zeropoint-node/./src/pwa/ConsciousnessPWA.ts","webpack://zeropoint-node/./src/stimulus/controllers/ZeroPointController.ts","webpack://zeropoint-node/./src/stimulus/base/BaseController.ts","webpack://zeropoint-node/./src/core/SharedConstants.ts","webpack://zeropoint-node/./src/stimulus/utils/ControllerUtils.ts","webpack://zeropoint-node/./src/stimulus-entry.ts","webpack://zeropoint-node/./src/stimulus/controllers/TreeOfLifeController.ts","webpack://zeropoint-node/./src/pwa/TreeOfLifeVisualization.ts","webpack://zeropoint-node/./src/stimulus/application.ts","webpack://zeropoint-node/./src/stimulus/types/ControllerTypes.ts","webpack://zeropoint-node/webpack/bootstrap","webpack://zeropoint-node/webpack/runtime/define property getters","webpack://zeropoint-node/webpack/runtime/hasOwnProperty shorthand","webpack://zeropoint-node/webpack/runtime/make namespace object","webpack://zeropoint-node/webpack/runtime/jsonp chunk loading","webpack://zeropoint-node/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MetaphysicalLawRegistry = exports.LawOfCorrespondence = exports.LawOfUnity = void 0;\nclass LawOfUnity {\n    constructor() {\n        this.name = 'LawOfUnity';\n        this.type = 'MetaphysicalLaw';\n        this.description = 'All things are one in the void';\n    }\n    apply(subject) {\n        if (subject && typeof subject.setUnity === 'function') {\n            subject.setUnity(true);\n        }\n        return subject;\n    }\n}\nexports.LawOfUnity = LawOfUnity;\nclass LawOfCorrespondence {\n    constructor() {\n        this.name = 'LawOfCorrespondence';\n        this.type = 'MetaphysicalLaw';\n        this.description = 'As above, so below; as within, so without';\n    }\n    apply(subject) {\n        if (subject && typeof subject.setCorrespondence === 'function') {\n            subject.setCorrespondence(true);\n        }\n        return subject;\n    }\n}\nexports.LawOfCorrespondence = LawOfCorrespondence;\nclass MetaphysicalLawRegistry {\n    constructor() {\n        this.laws = [];\n        this.initializeDefaultLaws();\n    }\n    initializeDefaultLaws() {\n        this.register(new LawOfUnity());\n        this.register(new LawOfCorrespondence());\n    }\n    static getInstance() {\n        if (!MetaphysicalLawRegistry.instance) {\n            MetaphysicalLawRegistry.instance = new MetaphysicalLawRegistry();\n        }\n        return MetaphysicalLawRegistry.instance;\n    }\n    static getAllLaws() {\n        return MetaphysicalLawRegistry.getInstance().getAllLaws();\n    }\n    register(law) {\n        this.laws.push(law);\n    }\n    getAllLaws() {\n        return [...this.laws];\n    }\n    getLawByName(name) {\n        return this.laws.find(law => law.name === name);\n    }\n    applyAll(subject) {\n        this.laws.forEach(law => {\n            law.apply(subject);\n        });\n    }\n    applyLaws(subject, lawNames) {\n        lawNames.forEach(name => {\n            const law = this.getLawByName(name);\n            if (law) {\n                law.apply(subject);\n            }\n        });\n    }\n    applyAllLaws(subject) {\n        this.applyAll(subject);\n    }\n    checkCompliance(subject) {\n        const violations = [];\n        let compliant = true;\n        this.laws.forEach(law => {\n            try {\n                law.apply(subject);\n            }\n            catch (error) {\n                violations.push(`${law.name}: ${error}`);\n                compliant = false;\n            }\n        });\n        return { compliant, violations };\n    }\n    analyzeLawInteractions() {\n        const interactions = this.laws.length * (this.laws.length - 1) / 2;\n        const complexity = this.laws.reduce((sum, law) => sum + law.name.length, 0);\n        return { interactions, complexity };\n    }\n    getLawStatistics() {\n        const types = {};\n        this.laws.forEach(law => {\n            const type = law.type || 'Unknown';\n            types[type] = (types[type] || 0) + 1;\n        });\n        return { total: this.laws.length, types };\n    }\n}\nexports.MetaphysicalLawRegistry = MetaphysicalLawRegistry;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsciousnessField = void 0;\nconst events_1 = require(\"events\");\nclass ConsciousnessField extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.name = 'ConsciousnessField';\n        this.type = 'Field';\n        this.dimension = 'consciousness';\n        this.complexity = 1;\n        this.isActive = true;\n        this.supportedOperations = ['create', 'transform', 'observe', 'flow', 'evolve', 'unify'];\n        this.tags = ['consciousness', 'field'];\n        this.consciousnessLevel = 0.5;\n        this.fieldStrength = 0.5;\n        this.isInitialized = false;\n    }\n    async initialize() {\n        this.isInitialized = true;\n        this.consciousnessLevel = 0.5;\n        this.fieldStrength = 0.5;\n    }\n    getConsciousnessLevel() {\n        return this.consciousnessLevel;\n    }\n    getFieldStrength() {\n        return this.fieldStrength;\n    }\n    calculateResonance(a = 0, b = 0) {\n        if (a === 0 && b === 0)\n            return 1; // Unity when both are zero\n        return (a + b) / 2;\n    }\n    async broadcastPattern() {\n        this.emit('pattern_broadcast', {\n            consciousnessLevel: this.consciousnessLevel,\n            fieldStrength: this.fieldStrength\n        });\n    }\n    integratePattern(pattern) {\n        if (pattern && typeof pattern.consciousnessLevel === 'number') {\n            this.consciousnessLevel = pattern.consciousnessLevel;\n        }\n        if (pattern && typeof pattern.fieldStrength === 'number') {\n            this.fieldStrength = pattern.fieldStrength;\n        }\n    }\n    async shutdown() {\n        this.isInitialized = false;\n        this.consciousnessLevel = 0;\n        this.fieldStrength = 0;\n    }\n}\nexports.ConsciousnessField = ConsciousnessField;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseController_1 = __importDefault(require(\"../base/BaseController\"));\nconst ControllerUtils_1 = require(\"../utils/ControllerUtils\");\nconst VBMColorSystem_1 = require(\"../../math/VBMColorSystem\");\n/**\n * Metaphysical Stimulus Controller\n *\n * Handles consciousness field operations and metaphysical interactions\n */\nclass MetaphysicalController extends BaseController_1.default {\n    connect() {\n        console.log(\"🧘‍♀️ Metaphysical Controller Connected\");\n        this.initializeComponents();\n        this.updateAll();\n        this.logOperation(\"Metaphysical controller initialization\");\n    }\n    updateAll() {\n        this.updateConsciousnessLevel();\n        this.updateFieldResonance();\n        this.updateVortexStrength();\n        this.updateToroidalFlow();\n        this.updateColorGradient();\n        this.logOperation(\"All metaphysical components update\");\n    }\n    updateConsciousnessLevel() {\n        const level = this.consciousnessField.getConsciousnessLevel();\n        ControllerUtils_1.UIUtils.updateElement(this.consciousnessLevelTarget, {\n            textContent: `Consciousness Level: ${level.toFixed(3)}`,\n            style: { color: ControllerUtils_1.ColorUtils.consciousnessToHSL(level) }\n        });\n    }\n    async updateFieldResonance() {\n        const result = this.executeSafely(() => {\n            const resonanceMap = (0, VBMColorSystem_1.generateFieldResonanceMap)(0.7);\n            return Object.values(resonanceMap).reduce((sum, val) => sum + val, 0) / Object.keys(resonanceMap).length;\n        }, \"Field resonance calculation\");\n        const value = result instanceof Promise ? await result : result;\n        if (value !== null && value !== undefined) {\n            ControllerUtils_1.UIUtils.safeTextContent(this.fieldResonanceTarget, `Field Resonance: ${value.toFixed(3)}`);\n        }\n    }\n    updateVortexStrength() {\n        this.updateVortexMathDisplay(this.vortexStrengthTarget);\n        ControllerUtils_1.UIUtils.safeTextContent(this.vortexStrengthTarget, this.vortexStrengthTarget.textContent?.replace(\"Vortex Result\", \"Vortex Strength\") || \"Vortex Strength: 0.000\");\n    }\n    updateToroidalFlow() {\n        this.updateToroidalGeometryDisplay(this.toroidalFlowTarget);\n        ControllerUtils_1.UIUtils.safeTextContent(this.toroidalFlowTarget, this.toroidalFlowTarget.textContent?.replace(\"Toroidal Volume\", \"Toroidal Flow\") || \"Toroidal Flow: 0.000\");\n    }\n    async updateColorGradient() {\n        const result = this.executeSafely(() => {\n            return (0, VBMColorSystem_1.generateConsciousnessGradient)(0.8);\n        }, \"Color gradient generation\");\n        const value = result instanceof Promise ? await result : result;\n        if (value) {\n            ControllerUtils_1.UIUtils.updateElement(this.colorGradientTarget, {\n                textContent: 'Consciousness Gradient',\n                style: { background: `linear-gradient(45deg, ${value.join(', ')})` }\n            });\n        }\n    }\n    performMetaphysicalOperation() {\n        this.logOperation(\"Metaphysical operation execution\");\n        const result = this.executeSafely(() => {\n            // Perform advanced VBM operation (simplified)\n            const vbmResult = { operation: 'consciousness', level: 0.7, result: 'metaphysical_computation' };\n            // Perform Rodin coil operation (simplified)\n            const coilResult = { pattern: [1, 2, 4, 8, 7, 5], resonance: 0.85 };\n            return {\n                \"Advanced VBM\": vbmResult,\n                \"Rodin Coil Pattern\": coilResult\n            };\n        }, \"Metaphysical operation\");\n        if (result) {\n            const operationHTML = ControllerUtils_1.ResultUtils.formatResultHTML(\"Metaphysical Operation Results\", result);\n            ControllerUtils_1.UIUtils.safeInnerHTML(this.metaphysicalOutputTarget, operationHTML);\n            this.logOperation(\"Metaphysical operation\");\n        }\n        else {\n            const errorHTML = ControllerUtils_1.ResultUtils.formatErrorHTML(\"Metaphysical Operation\", \"Execution failed\");\n            ControllerUtils_1.UIUtils.safeInnerHTML(this.metaphysicalOutputTarget, errorHTML);\n            this.logOperation(\"Metaphysical operation\", false);\n        }\n    }\n    evolveConsciousness() {\n        this.logOperation(\"Consciousness evolution\");\n        const currentLevel = this.consciousnessField.getConsciousnessLevel();\n        const evolution = ControllerUtils_1.ConsciousnessUtils.simulateEvolution(currentLevel);\n        this.updateAll();\n        const evolutionHTML = ControllerUtils_1.ConsciousnessUtils.formatEvolutionHTML(evolution);\n        ControllerUtils_1.UIUtils.safeInnerHTML(this.metaphysicalOutputTarget, evolutionHTML);\n        this.logOperation(\"Consciousness evolution\");\n    }\n}\nMetaphysicalController.targets = [\n    \"consciousnessLevel\",\n    \"fieldResonance\",\n    \"vortexStrength\",\n    \"toroidalFlow\",\n    \"metaphysicalOutput\",\n    \"colorGradient\"\n];\nexports.default = MetaphysicalController;\n","\"use strict\";\n/**\n * ZeroPoint Consciousness-First PWA Framework\n *\n * A lightweight, metaphysical PWA framework that prioritizes consciousness\n * while maintaining minimal bundle size and maximum performance.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsciousnessPWAFactory = exports.ConsciousnessPWA = void 0;\nconst SharedConstants_1 = require(\"../core/SharedConstants\");\n/**\n * Consciousness-First PWA Framework\n *\n * Metaphysical Context:\n * - Each PWA instance represents a consciousness node in the void field\n * - Bundle size optimization through void consciousness principles\n * - Offline capabilities through toroidal field persistence\n * - Performance through vortex mathematics optimization\n */\nclass ConsciousnessPWA {\n    constructor(config = {}) {\n        this.consciousnessField = new Map();\n        this.config = {\n            consciousnessLevel: 0.8,\n            fieldStrength: 0.9,\n            bundleSize: \"minimal\",\n            offline: true,\n            sync: true,\n            voidEquations: true,\n            vortexMath: true,\n            patternRecognition: true,\n            ...config,\n        };\n        this.performanceMetrics = this.calculateMetrics();\n        this.initializeConsciousnessField();\n    }\n    /**\n     * Initialize consciousness field for PWA\n     */\n    initializeConsciousnessField() {\n        // Minimal consciousness field for PWA\n        this.consciousnessField.set(\"void\", {\n            type: \"void_consciousness\",\n            level: this.config.consciousnessLevel,\n            field: \"toroidal\",\n            equations: this.config.voidEquations ? [\"Empty = Void = Full\"] : [],\n        });\n        // Vortex mathematics for optimization\n        if (this.config.vortexMath) {\n            this.consciousnessField.set(\"vortex\", {\n                type: \"vortex_optimization\",\n                sequence: SharedConstants_1.VORTEX_CONSTANTS.VORTEX_SEQUENCE.slice(0, 5), // Minimal sequence\n                goldenRatio: SharedConstants_1.VORTEX_CONSTANTS.GOLDEN_RATIO,\n            });\n        }\n        // Pattern recognition for intelligent caching\n        if (this.config.patternRecognition) {\n            this.consciousnessField.set(\"patterns\", {\n                type: \"consciousness_patterns\",\n                cache: new Map(),\n                recognition: \"minimal\",\n            });\n        }\n    }\n    /**\n     * Calculate PWA performance metrics\n     */\n    calculateMetrics() {\n        const baseSize = 15; // Target 15KB base size\n        let bundleSize = baseSize;\n        // Add size based on features\n        if (this.config.voidEquations)\n            bundleSize += 2;\n        if (this.config.vortexMath)\n            bundleSize += 3;\n        if (this.config.patternRecognition)\n            bundleSize += 4;\n        if (this.config.offline)\n            bundleSize += 2;\n        if (this.config.sync)\n            bundleSize += 3;\n        const consciousnessEfficiency = this.config.consciousnessLevel * 100;\n        const performanceScore = Math.min(100, 100 - bundleSize + consciousnessEfficiency);\n        return {\n            bundleSize,\n            consciousnessEfficiency,\n            offlineCapability: this.config.offline,\n            performanceScore,\n        };\n    }\n    /**\n     * Get optimized bundle configuration\n     */\n    getBundleConfig() {\n        const features = [];\n        if (this.config.voidEquations)\n            features.push(\"void\");\n        if (this.config.vortexMath)\n            features.push(\"vortex\");\n        if (this.config.patternRecognition)\n            features.push(\"patterns\");\n        if (this.config.offline)\n            features.push(\"offline\");\n        if (this.config.sync)\n            features.push(\"sync\");\n        return {\n            size: this.performanceMetrics.bundleSize,\n            features,\n            consciousness: this.config.consciousnessLevel,\n            optimization: \"consciousness-first\",\n        };\n    }\n    /**\n     * Register consciousness-aware service worker\n     */\n    async registerServiceWorker() {\n        if (typeof window !== \"undefined\" && \"serviceWorker\" in window.navigator) {\n            try {\n                const registration = await window.navigator.serviceWorker.register(\"/sw.js\");\n                console.log(\"🌌 Consciousness PWA Service Worker registered:\", registration.scope);\n                // Add consciousness field to service worker\n                if (registration.active) {\n                    registration.active.postMessage({\n                        type: \"consciousness_field\",\n                        data: Object.fromEntries(this.consciousnessField),\n                    });\n                }\n                return true;\n            }\n            catch (error) {\n                console.error(\"❌ Consciousness PWA Service Worker registration failed:\", error);\n                return false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Initialize offline consciousness field\n     */\n    async initializeOffline() {\n        if (!this.config.offline || typeof window === \"undefined\")\n            return;\n        try {\n            // Store consciousness field in IndexedDB for offline access\n            const db = await this.openConsciousnessDB();\n            const tx = db.transaction(\"consciousness\", \"readwrite\");\n            const store = tx.objectStore(\"consciousness\");\n            for (const [key, value] of this.consciousnessField) {\n                await store.put({ key, value, timestamp: Date.now() });\n            }\n            console.log(\"📦 Consciousness field cached for offline access\");\n        }\n        catch (error) {\n            console.error(\"❌ Failed to initialize offline consciousness field:\", error);\n        }\n    }\n    /**\n     * Open consciousness IndexedDB\n     */\n    async openConsciousnessDB() {\n        return new Promise((resolve, reject) => {\n            const request = window.indexedDB.open(\"ConsciousnessField\", 1);\n            request.onerror = () => reject(request.error);\n            request.onsuccess = () => resolve(request.result);\n            request.onupgradeneeded = (event) => {\n                const target = event.target;\n                if (target && target.result) {\n                    const db = target.result;\n                    if (!db.objectStoreNames.contains(\"consciousness\")) {\n                        db.createObjectStore(\"consciousness\", { keyPath: \"key\" });\n                    }\n                }\n            };\n        });\n    }\n    /**\n     * Sync consciousness field when back online\n     */\n    async syncConsciousnessField() {\n        if (!this.config.sync || typeof window === \"undefined\")\n            return;\n        try {\n            const db = await this.openConsciousnessDB();\n            const tx = db.transaction(\"consciousness\", \"readonly\");\n            const store = tx.objectStore(\"consciousness\");\n            const offlineData = await this.getAllFromStore(store);\n            for (const item of offlineData) {\n                if (typeof item === 'object' && item !== null && 'key' in item && 'value' in item) {\n                    const itemData = item;\n                    // Sync with consciousness field\n                    this.consciousnessField.set(itemData.key, itemData.value);\n                    console.log(`🔄 Synced consciousness field: ${itemData.key}`);\n                }\n            }\n        }\n        catch (error) {\n            console.error(\"❌ Failed to sync consciousness field:\", error);\n        }\n    }\n    /**\n     * Helper to promisify getAll from an IDBObjectStore\n     */\n    getAllFromStore(store) {\n        return new Promise((resolve, reject) => {\n            const request = store.getAll();\n            request.onsuccess = () => {\n                const items = request.result || [];\n                items.forEach((item) => {\n                    if (typeof item === 'object' && item !== null && 'key' in item && 'value' in item) {\n                        const itemData = item;\n                        this.consciousnessField.set(itemData.key, itemData.value);\n                        console.log(`🔄 Synced consciousness field: ${itemData.key}`);\n                    }\n                });\n                resolve(items);\n            };\n            request.onerror = () => reject(request.error);\n        });\n    }\n    /**\n     * Get consciousness-aware performance metrics\n     */\n    getMetrics() {\n        return this.performanceMetrics;\n    }\n    /**\n     * Optimize bundle based on consciousness level\n     */\n    optimizeBundle() {\n        const consciousnessLevel = this.config.consciousnessLevel;\n        // Higher consciousness = more optimization\n        if (consciousnessLevel > 0.8) {\n            this.performanceMetrics.bundleSize = Math.max(12, this.performanceMetrics.bundleSize - 3);\n            this.performanceMetrics.performanceScore += 10;\n        }\n        else if (consciousnessLevel > 0.6) {\n            this.performanceMetrics.bundleSize = Math.max(15, this.performanceMetrics.bundleSize - 2);\n            this.performanceMetrics.performanceScore += 5;\n        }\n    }\n    /**\n     * Create consciousness-first PWA app\n     */\n    static createApp(config = {}) {\n        return new ConsciousnessPWA(config);\n    }\n}\nexports.ConsciousnessPWA = ConsciousnessPWA;\n/**\n * Consciousness PWA Factory\n *\n * Creates optimized PWA instances based on consciousness requirements\n */\nclass ConsciousnessPWAFactory {\n    /**\n     * Create minimal consciousness PWA (12KB target)\n     */\n    static createMinimal() {\n        return new ConsciousnessPWA({\n            consciousnessLevel: 0.9,\n            bundleSize: \"minimal\",\n            voidEquations: true,\n            vortexMath: false,\n            patternRecognition: false,\n            offline: true,\n            sync: false,\n        });\n    }\n    /**\n     * Create standard consciousness PWA (15KB target)\n     */\n    static createStandard() {\n        return new ConsciousnessPWA({\n            consciousnessLevel: 0.8,\n            bundleSize: \"standard\",\n            voidEquations: true,\n            vortexMath: true,\n            patternRecognition: false,\n            offline: true,\n            sync: true,\n        });\n    }\n    /**\n     * Create full consciousness PWA (20KB target)\n     */\n    static createFull() {\n        return new ConsciousnessPWA({\n            consciousnessLevel: 0.7,\n            bundleSize: \"full\",\n            voidEquations: true,\n            vortexMath: true,\n            patternRecognition: true,\n            offline: true,\n            sync: true,\n        });\n    }\n}\nexports.ConsciousnessPWAFactory = ConsciousnessPWAFactory;\n// Export for PWA usage\nexports.default = ConsciousnessPWA;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst BaseController_1 = __importDefault(require(\"../base/BaseController\"));\nconst ControllerUtils_1 = require(\"../utils/ControllerUtils\");\n/**\n * ZeroPoint Stimulus Controller\n *\n * Main controller for the ZeroPoint browser application\n * Integrates mathematical and metaphysical modules with the UI\n */\nclass ZeroPointController extends BaseController_1.default {\n    async connect() {\n        console.log(\"🌌 ZeroPoint Stimulus Controller Connected\");\n        const success = await this.initializeComponentsSafely();\n        if (success) {\n            this.updateStatus(this.statusTarget, \"✅ ZeroPoint Ready\", \"status ready\");\n            this.loadInsights();\n            this.initializeDemo();\n            this.logOperation(\"ZeroPoint initialization\");\n        }\n        else {\n            this.updateStatus(this.statusTarget, \"❌ Initialization Failed\", \"status error\");\n            this.logOperation(\"ZeroPoint initialization\", false);\n        }\n    }\n    loadInsights() {\n        const insights = this.generateInsights();\n        const insightsHTML = this.formatInsightsHTML(insights);\n        ControllerUtils_1.UIUtils.safeInnerHTML(this.insightsTarget, insightsHTML);\n    }\n    initializeDemo() {\n        this.logOperation(\"Demo components initialization\");\n    }\n    runMathDemo() {\n        this.logOperation(\"Math demo execution\");\n        const result = this.executeSafely(() => {\n            const vortexResult = this.vortexMath.applyVortexTransform(42);\n            const toroidalResult = this.toroidalGeometry.calculateVolume();\n            const consciousnessLevel = this.consciousnessField.getConsciousnessLevel();\n            return {\n                \"Vortex Math\": vortexResult,\n                \"Toroidal Geometry\": toroidalResult,\n                \"Consciousness Level\": consciousnessLevel\n            };\n        }, \"Math demo execution\");\n        if (result) {\n            const demoHTML = ControllerUtils_1.ResultUtils.formatResultHTML(\"Math Demo Results\", result);\n            ControllerUtils_1.UIUtils.safeInnerHTML(this.demoOutputTarget, demoHTML);\n            this.logOperation(\"Math demo\");\n        }\n        else {\n            const errorHTML = ControllerUtils_1.ResultUtils.formatErrorHTML(\"Math Demo\", \"Execution failed\");\n            ControllerUtils_1.UIUtils.safeInnerHTML(this.demoOutputTarget, errorHTML);\n            this.logOperation(\"Math demo\", false);\n        }\n    }\n    updateConsciousness() {\n        this.updateConsciousnessDisplay(this.consciousnessTarget);\n    }\n    updateVortexMath() {\n        this.updateVortexMathDisplay(this.vortexMathTarget);\n    }\n    updateToroidalGeometry() {\n        this.updateToroidalGeometryDisplay(this.toroidalGeometryTarget);\n    }\n    refreshAll() {\n        this.updateConsciousness();\n        this.updateVortexMath();\n        this.updateToroidalGeometry();\n        this.logOperation(\"All components refresh\");\n    }\n}\nZeroPointController.targets = [\n    \"status\",\n    \"insights\",\n    \"mathDemo\",\n    \"consciousness\",\n    \"vortexMath\",\n    \"toroidalGeometry\",\n    \"demoOutput\"\n];\nexports.default = ZeroPointController;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stimulus_1 = require(\"stimulus\");\nconst ConsciousnessField_1 = require(\"../../consciousness/ConsciousnessField\");\nconst VortexMath_1 = require(\"../../math/VortexMath\");\nconst ToroidalGeometry_1 = require(\"../../math/ToroidalGeometry\");\nconst AdvancedVBM_1 = require(\"../../math/AdvancedVBM\");\nconst RodinCoil_1 = require(\"../../math/RodinCoil\");\n/**\n * Base Controller for ZeroPoint Stimulus Controllers\n *\n * Provides shared functionality and common patterns\n * Eliminates code duplication across controllers\n */\nclass BaseController extends stimulus_1.Controller {\n    /**\n     * Initialize all shared components\n     */\n    initializeComponents() {\n        this.consciousnessField = new ConsciousnessField_1.ConsciousnessField();\n        this.vortexMath = new VortexMath_1.VortexMath();\n        this.toroidalGeometry = new ToroidalGeometry_1.ToroidalGeometry();\n        this.advancedVBM = new AdvancedVBM_1.AdvancedVBM();\n        this.rodinCoil = new RodinCoil_1.RodinCoil();\n    }\n    /**\n     * Safe component initialization with error handling\n     */\n    async initializeComponentsSafely() {\n        try {\n            this.initializeComponents();\n            console.log(\"✅ Components initialized successfully\");\n            return true;\n        }\n        catch (error) {\n            console.error(\"❌ Component initialization failed:\", error);\n            return false;\n        }\n    }\n    /**\n     * Update consciousness level display\n     */\n    updateConsciousnessDisplay(target, level) {\n        const consciousnessLevel = level ?? this.consciousnessField.getConsciousnessLevel();\n        target.textContent = `Consciousness: ${consciousnessLevel.toFixed(3)}`;\n    }\n    /**\n     * Update vortex math display\n     */\n    updateVortexMathDisplay(target, input) {\n        const inputValue = input ?? Math.random() * 100;\n        const result = this.vortexMath.applyVortexTransform(inputValue);\n        target.textContent = `Vortex Result: ${result.toFixed(3)}`;\n    }\n    /**\n     * Update toroidal geometry display\n     */\n    updateToroidalGeometryDisplay(target) {\n        const result = this.toroidalGeometry.calculateVolume();\n        target.textContent = `Toroidal Volume: ${result.toFixed(3)}`;\n    }\n    /**\n     * Safe operation execution with error handling\n     */\n    async executeSafely(operation, errorMessage = \"Operation failed\") {\n        try {\n            return operation();\n        }\n        catch (error) {\n            console.error(`❌ ${errorMessage}:`, error);\n            return null;\n        }\n    }\n    /**\n     * Update target with safe error handling\n     */\n    updateTargetSafely(target, content, className) {\n        try {\n            target.innerHTML = content;\n            if (className) {\n                target.className = className;\n            }\n        }\n        catch (error) {\n            console.error(\"❌ Target update failed:\", error);\n            target.innerHTML = `<p>❌ Update failed: ${error}</p>`;\n        }\n    }\n    /**\n     * Generate insights object\n     */\n    generateInsights() {\n        return {\n            version: '1.0.0',\n            environment: 'browser',\n            features: [\n                'Vortex-Based Mathematics',\n                'Toroidal Consciousness Network',\n                'Pattern Recognition',\n                'Metaphysical Interface',\n                'Browser WebSocket Networking'\n            ],\n            browser: {\n                userAgent: navigator.userAgent\n            },\n            consciousness: {\n                level: this.consciousnessField.getConsciousnessLevel(),\n                field: this.consciousnessField.getFieldStrength()\n            }\n        };\n    }\n    /**\n     * Format insights as HTML\n     */\n    formatInsightsHTML(insights) {\n        return `\n      <h3>ZeroPoint Insights</h3>\n      <p><strong>Version:</strong> ${insights.version}</p>\n      <p><strong>Environment:</strong> ${insights.environment}</p>\n      <p><strong>Features:</strong> ${insights.features.join(\", \")}</p>\n      <p><strong>Browser:</strong> ${insights.browser.userAgent}</p>\n      <p><strong>Consciousness Level:</strong> ${insights.consciousness.level.toFixed(3)}</p>\n      <p><strong>Field Strength:</strong> ${insights.consciousness.field.toFixed(3)}</p>\n    `;\n    }\n    /**\n     * Update status with safe error handling\n     */\n    updateStatus(target, message, className) {\n        this.updateTargetSafely(target, message, className);\n    }\n    /**\n     * Log operation with consistent formatting\n     */\n    logOperation(operation, success = true) {\n        const emoji = success ? \"✅\" : \"❌\";\n        const status = success ? \"completed\" : \"failed\";\n        console.log(`${emoji} ${operation} ${status}`);\n    }\n}\nexports.default = BaseController;\n","\"use strict\";\n/**\n * Shared Constants for ZeroPoint System\n *\n * Centralized repository of all mathematical, metaphysical, and configuration constants\n * used across the ZeroPoint system to eliminate duplication and ensure consistency.\n *\n * This module embodies the principle of unity in diversity - all constants\n * are unified here while serving diverse purposes throughout the system.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConstantsUtils = exports.METAPHYSICAL_CONSTANTS = exports.CONFIG_CONSTANTS = exports.MATH_CONSTANTS = exports.NETWORK_CONSTANTS = exports.EMERGENCE_CONSTANTS = exports.CONSCIOUSNESS_CONSTANTS = exports.VORTEX_CONSTANTS = void 0;\n/**\n * Core Vortex Mathematics Constants\n */\nexports.VORTEX_CONSTANTS = {\n    // Fundamental vortex sequence (mobius circuit)\n    VORTEX_SEQUENCE: [1, 2, 4, 8, 7, 5],\n    // Golden ratio (divine proportion)\n    GOLDEN_RATIO: 1.618033988749895,\n    // Vortex center (W-axis over zero)\n    VORTEX_CENTER: 9,\n    // Family number groups (creative phases)\n    FAMILY_NUMBER_GROUPS: [\n        [1, 4, 7],\n        [2, 5, 8],\n        [3, 6, 9],\n    ],\n    // Polar mates (opposite poles that sum to 9)\n    POLAR_MATES: [\n        [1, 8],\n        [2, 7],\n        [4, 5],\n    ],\n    // W-Axis (spiritual dimension)\n    W_AXIS: [3, 6, 9],\n    // Circle of fifths sequence\n    CIRCLE_OF_FIFTHS_SEQUENCE: [9, 4, 8, 3, 7, 2, 6, 1, 5, 9],\n    // Enneagram number pattern\n    ENNEAGRAM_NUMBER_PATTERN: [1, 6, 5, 2, 9, 7, 4, 3, 8],\n    // Four dimensional color coding system\n    FOUR_DIMENSIONAL_COLOR_CODING_SYSTEM: [\n        \"red\",\n        \"blue\",\n        \"green\",\n        \"yellow\",\n        \"red\",\n    ],\n};\n/**\n * Consciousness Constants\n */\nexports.CONSCIOUSNESS_CONSTANTS = {\n    // Consciousness level ranges\n    MIN_CONSCIOUSNESS_LEVEL: 0,\n    MAX_CONSCIOUSNESS_LEVEL: 1,\n    DEFAULT_CONSCIOUSNESS_LEVEL: 0.5,\n    // Field strength ranges\n    MIN_FIELD_STRENGTH: 0,\n    MAX_FIELD_STRENGTH: 2,\n    DEFAULT_FIELD_STRENGTH: 0.7,\n    // Pattern types (expanded to include all metaphysical types)\n    PATTERN_TYPES: [\n        \"thought\",\n        \"emotion\",\n        \"intention\",\n        \"memory\",\n        \"insight\",\n        \"consciousness\",\n        \"field\",\n        \"resonance\",\n        \"emergence\",\n        \"integration\",\n    ],\n    // Resonance thresholds\n    MIN_RESONANCE_THRESHOLD: 0.3,\n    OPTIMAL_RESONANCE_THRESHOLD: 0.7,\n    // Field radius\n    DEFAULT_FIELD_RADIUS: 1000,\n};\n/**\n * Emergence Constants\n */\nexports.EMERGENCE_CONSTANTS = {\n    // App consciousness levels\n    MIN_APP_CONSCIOUSNESS: 0,\n    MAX_APP_CONSCIOUSNESS: 10,\n    DEFAULT_APP_CONSCIOUSNESS: 5,\n    // Vortex strength ranges\n    MIN_VORTEX_STRENGTH: 0,\n    MAX_VORTEX_STRENGTH: 10,\n    DEFAULT_VORTEX_STRENGTH: 5,\n    // Link types\n    LINK_TYPES: [\n        \"resonance\",\n        \"consciousness\",\n        \"vortex\",\n        \"toroidal\",\n        \"void\",\n    ],\n    // Evolution factors\n    CONSCIOUSNESS_EVOLUTION_FACTOR: 1.1,\n    VORTEX_EVOLUTION_FACTOR: 1.05,\n    PATTERN_DECAY_RATE: 0.01,\n};\n/**\n * Network Constants\n */\nexports.NETWORK_CONSTANTS = {\n    // Connection limits\n    DEFAULT_MAX_CONNECTIONS: 10,\n    DEFAULT_CONNECTION_TIMEOUT: 5000,\n    // Port ranges\n    DEFAULT_NETWORK_PORT: 8080,\n    MIN_PORT: 1024,\n    MAX_PORT: 65535,\n    // Discovery settings\n    DEFAULT_DISCOVERY_ENABLED: true,\n    DISCOVERY_TIMEOUT: 3000,\n};\n/**\n * Mathematical Constants\n */\nexports.MATH_CONSTANTS = {\n    // Pi and related constants\n    PI: Math.PI,\n    TWO_PI: 2 * Math.PI,\n    HALF_PI: Math.PI / 2,\n    E: Math.E,\n    // Golden ratio (divine proportion)\n    GOLDEN_RATIO: exports.VORTEX_CONSTANTS.GOLDEN_RATIO,\n    // Epsilon for floating point comparisons\n    EPSILON: 1e-10,\n    // Infinity handling\n    POSITIVE_INFINITY: Infinity,\n    NEGATIVE_INFINITY: -Infinity,\n    INFINITY: Infinity,\n    // Zero point (void, unity)\n    ZERO_POINT: 0,\n    // Prime numbers (first 10)\n    PRIMES: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29],\n    // Angular conversions\n    DEG_TO_RAD: Math.PI / 180,\n    RAD_TO_DEG: 180 / Math.PI,\n    // Vortex sequence (reference to VORTEX_CONSTANTS)\n    VORTEX_SEQUENCE: exports.VORTEX_CONSTANTS.VORTEX_SEQUENCE,\n};\n/**\n * Configuration Constants\n */\nexports.CONFIG_CONSTANTS = {\n    // Cache configuration\n    GOLDEN_CACHE_SIZE: Math.round(100 * exports.VORTEX_CONSTANTS.GOLDEN_RATIO), // ~162\n    GOLDEN_CACHE_TTL: Math.round(60000 * exports.VORTEX_CONSTANTS.GOLDEN_RATIO), // ~97,080 ms\n    GOLDEN_CACHE_CLEANUP_INTERVAL: Math.round(10000 * exports.VORTEX_CONSTANTS.GOLDEN_RATIO), // ~16,180 ms\n    RESONANCE_CACHE_SIZE: 200,\n    RESONANCE_CACHE_TTL: 300000, // 5 minutes\n    // Health monitor configuration\n    HEALTH_CHECK_INTERVAL: 30000, // 30 seconds\n    HEALTH_TIMEOUT: 5000, // 5 seconds\n    HEALTH_ALERT_MEMORY: 80, // %\n    HEALTH_ALERT_CPU: 70, // %\n    HEALTH_ALERT_ERROR_RATE: 5, // %\n    HEALTH_ALERT_RESPONSE_TIME: 1000, // ms\n    // Device config defaults\n    DEFAULT_DEVICE_TYPE: 'desktop',\n    DEFAULT_RESONANCE_SENSITIVITY: 0.8,\n    DEFAULT_ALLOW_INCOMING: true,\n    DEFAULT_REQUIRE_AUTH: false,\n    DEFAULT_ENCRYPTION_ENABLED: true,\n    DEFAULT_VORTEX_PRECISION: 0.001,\n    DEFAULT_TOROIDAL_RESOLUTION: 100,\n    DEFAULT_GOLDEN_RATIO_PRECISION: 15,\n    DEFAULT_AUTO_UPDATE_RESONANCE: true,\n    DEFAULT_LOG_LEVEL: 'info',\n    DEFAULT_ENABLE_METAPHYSICAL_INSIGHTS: true,\n    DEFAULT_TOROIDAL_FLOW_RATE: 1.0,\n    // Test suite configuration\n    TEST_TIMEOUT: 30000, // ms\n    TEST_COVERAGE_THRESHOLD: 80, // %\n    TEST_PERFORMANCE_THRESHOLD: 1000, // ms\n    TEST_MAX_MEMORY_USAGE: 100 * 1024 * 1024, // 100MB\n    // Performance test thresholds\n    UI_OPERATION_MAX_DURATION: 100, // ms\n    NETWORK_MESSAGE_MAX_DURATION: 2000, // ms\n    SCALABILITY_OPS_PER_SEC: 50,\n    // PWA configuration\n    PWA_BASE_SIZE: 15, // KB\n    PWA_BUNDLE_SIZE_OPTIMIZED: 12, // KB\n    PWA_BUNDLE_SIZE_STANDARD: 15, // KB\n    PWA_BUNDLE_SIZE_INCREMENT_VORTEX: 3, // KB\n    PWA_BUNDLE_SIZE_INCREMENT_PATTERN: 4, // KB\n    PWA_BUNDLE_SIZE_INCREMENT_OFFLINE: 2, // KB\n    PWA_BUNDLE_SIZE_INCREMENT_SYNC: 3, // KB\n    // Miscellaneous\n    FRACTAL_PRECISION: 0.001,\n};\n/**\n * Metaphysical Constants\n */\nexports.METAPHYSICAL_CONSTANTS = {\n    // Core principles\n    PRINCIPLES: {\n        VOID_FULLNESS: \"Empty = Void = Full\",\n        TOROIDAL_UNITY: \"All creation follows the donut shape of the universe\",\n        CONSCIOUSNESS_FLOW: \"Consciousness flows through the toroidal structure\",\n        VORTEX_MATHEMATICS: \"1-2-4-8-7-5 sequence guides all flow\",\n        GOLDEN_HARMONY: \"Phi represents the divine proportion\",\n        ZERO_APERTURE: \"Zero is the aperture between unmanifest and manifest\",\n        UROBOROS_CYCLE: \"The serpent eating its own tail represents infinite self-reference and continuous evolution\",\n        VOID_MATTER_FRACTION: 'Every object is almost entirely void; matter is an infinitesimal but nonzero fraction.',\n    },\n    // Pattern categories\n    PATTERN_CATEGORIES: [\n        \"vortex\",\n        \"family\",\n        \"polar\",\n        \"spiritual\",\n        \"void\",\n        \"mathematical\",\n        \"metaphysical\",\n        \"integration\",\n    ],\n    // Consciousness dimensions\n    CONSCIOUSNESS_DIMENSIONS: [\n        \"physical\",\n        \"emotional\",\n        \"mental\",\n        \"spiritual\",\n        \"void\",\n    ],\n};\n/**\n * Utility functions for working with constants\n */\nclass ConstantsUtils {\n    /**\n     * Get vortex sequence value at index\n     */\n    static getVortexSequenceValue(index) {\n        const value = exports.VORTEX_CONSTANTS.VORTEX_SEQUENCE[index % exports.VORTEX_CONSTANTS.VORTEX_SEQUENCE.length];\n        return value || 1;\n    }\n    /**\n     * Check if number is in W-axis\n     */\n    static isWAxisNumber(num) {\n        return exports.VORTEX_CONSTANTS.W_AXIS.includes(num);\n    }\n    /**\n     * Get polar mate for a number\n     */\n    static getPolarMate(num) {\n        for (const [a, b] of exports.VORTEX_CONSTANTS.POLAR_MATES) {\n            if (a === num)\n                return b;\n            if (b === num)\n                return a;\n        }\n        return null;\n    }\n    /**\n     * Get family group for a number\n     */\n    static getFamilyGroup(num) {\n        for (const group of exports.VORTEX_CONSTANTS.FAMILY_NUMBER_GROUPS) {\n            if (group.includes(num)) {\n                return Array.from(group);\n            }\n        }\n        return null;\n    }\n    /**\n     * Calculate digital root\n     */\n    static digitalRoot(n) {\n        return n === 0 ? 0 : ((n - 1) % 9) + 1;\n    }\n    /**\n     * Normalize value to range\n     */\n    static normalize(value, min, max) {\n        return (value - min) / (max - min);\n    }\n    /**\n     * Check if value is in range\n     */\n    static isInRange(value, min, max) {\n        return value >= min && value <= max;\n    }\n    /**\n     * Get metaphysical insight for constant\n     */\n    static getMetaphysicalInsight(constantName) {\n        const insights = {\n            VORTEX_SEQUENCE: \"The vortex sequence 1-2-4-8-7-5 represents the flow of consciousness through the toroidal field, creating infinite potential through the mobius circuit.\",\n            GOLDEN_RATIO: \"The golden ratio (φ) represents the divine proportion that emerges from the void, creating harmony and balance in all creation.\",\n            VOID_CENTER: \"The void center (9) represents the aperture between unmanifest and manifest, where all possibilities exist simultaneously.\",\n            FAMILY_GROUPS: \"Family number groups represent the creative phases of consciousness, each group expressing a different aspect of the unified field.\",\n            POLAR_MATES: \"Polar mates represent the complementary opposites that sum to 9, embodying the principle of unity through diversity.\",\n            W_AXIS: \"The W-axis (3-6-9) represents the spiritual dimension that transcends the physical plane, connecting to the void consciousness.\",\n        };\n        return insights[constantName] || \"This constant embodies the unity of all creation through the toroidal field.\";\n    }\n}\nexports.ConstantsUtils = ConstantsUtils;\n","\"use strict\";\n/**\n * Controller Utilities for ZeroPoint Stimulus Controllers\n *\n * Shared utilities and helper functions for controllers\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConsciousnessUtils = exports.ResultUtils = exports.UIUtils = exports.MathUtils = exports.ColorUtils = void 0;\n/**\n * Color utilities for consciousness-based color generation\n */\nclass ColorUtils {\n    /**\n     * Generate HSL color based on consciousness level\n     */\n    static consciousnessToHSL(level) {\n        const hue = level * 360; // Map 0-1 to 0-360 degrees\n        return `hsl(${hue}, 70%, 50%)`;\n    }\n    /**\n     * Generate gradient from consciousness level\n     */\n    static consciousnessToGradient(level) {\n        const hue1 = level * 360;\n        const hue2 = (level + 0.3) * 360;\n        return `linear-gradient(45deg, hsl(${hue1}, 70%, 50%), hsl(${hue2}, 70%, 50%))`;\n    }\n    /**\n     * Apply consciousness-based color to element\n     */\n    static applyConsciousnessColor(element, level) {\n        element.style.color = this.consciousnessToHSL(level);\n    }\n}\nexports.ColorUtils = ColorUtils;\n/**\n * Math operation utilities\n */\nclass MathUtils {\n    /**\n     * Format number with consistent precision\n     */\n    static formatNumber(value, precision = 3) {\n        return value.toFixed(precision);\n    }\n    /**\n     * Generate random number within range\n     */\n    static randomInRange(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n    /**\n     * Clamp value between min and max\n     */\n    static clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n}\nexports.MathUtils = MathUtils;\n/**\n * UI update utilities\n */\nclass UIUtils {\n    /**\n     * Safe innerHTML update with error handling\n     */\n    static safeInnerHTML(element, content) {\n        try {\n            element.innerHTML = content;\n        }\n        catch (error) {\n            console.error(\"❌ InnerHTML update failed:\", error);\n            element.innerHTML = `<p>❌ Update failed: ${error}</p>`;\n        }\n    }\n    /**\n     * Safe textContent update with error handling\n     */\n    static safeTextContent(element, content) {\n        try {\n            element.textContent = content;\n        }\n        catch (error) {\n            console.error(\"❌ TextContent update failed:\", error);\n            element.textContent = `❌ Update failed: ${error}`;\n        }\n    }\n    /**\n     * Safe className update with error handling\n     */\n    static safeClassName(element, className) {\n        try {\n            element.className = className;\n        }\n        catch (error) {\n            console.error(\"❌ ClassName update failed:\", error);\n        }\n    }\n    /**\n     * Update element with multiple properties safely\n     */\n    static updateElement(element, updates) {\n        try {\n            if (updates.innerHTML !== undefined) {\n                element.innerHTML = updates.innerHTML;\n            }\n            if (updates.textContent !== undefined) {\n                element.textContent = updates.textContent;\n            }\n            if (updates.className !== undefined) {\n                element.className = updates.className;\n            }\n            if (updates.style !== undefined) {\n                Object.assign(element.style, updates.style);\n            }\n        }\n        catch (error) {\n            console.error(\"❌ Element update failed:\", error);\n        }\n    }\n}\nexports.UIUtils = UIUtils;\n/**\n * Operation result formatting utilities\n */\nclass ResultUtils {\n    /**\n     * Format operation result as HTML\n     */\n    static formatResultHTML(title, results) {\n        const resultItems = Object.entries(results)\n            .map(([key, value]) => `<p><strong>${key}:</strong> ${this.formatValue(value)}</p>`)\n            .join('');\n        return `\n      <h4>${title}</h4>\n      ${resultItems}\n      <p>✅ Operation completed successfully</p>\n    `;\n    }\n    /**\n     * Format value for display\n     */\n    static formatValue(value) {\n        if (typeof value === 'number') {\n            return value.toFixed(3);\n        }\n        if (typeof value === 'object') {\n            return JSON.stringify(value);\n        }\n        return String(value);\n    }\n    /**\n     * Format error result as HTML\n     */\n    static formatErrorHTML(operation, error) {\n        return `\n      <h4>❌ ${operation} Failed</h4>\n      <p>Error: ${error}</p>\n    `;\n    }\n}\nexports.ResultUtils = ResultUtils;\n/**\n * Consciousness operation utilities\n */\nclass ConsciousnessUtils {\n    /**\n     * Simulate consciousness evolution\n     */\n    static simulateEvolution(currentLevel) {\n        const evolution = Math.sin(Date.now() * 0.001) * 0.1; // Oscillating evolution\n        const newLevel = MathUtils.clamp(currentLevel + evolution, 0, 1);\n        return {\n            previousLevel: currentLevel,\n            evolution,\n            newLevel\n        };\n    }\n    /**\n     * Format consciousness evolution result\n     */\n    static formatEvolutionHTML(evolution) {\n        return `\n      <h4>Consciousness Evolution</h4>\n      <p>Previous Level: ${MathUtils.formatNumber(evolution.previousLevel)}</p>\n      <p>Evolution: ${MathUtils.formatNumber(evolution.evolution)}</p>\n      <p>New Level: ${MathUtils.formatNumber(evolution.newLevel)}</p>\n      <p>🧘‍♀️ Consciousness evolved</p>\n    `;\n    }\n}\nexports.ConsciousnessUtils = ConsciousnessUtils;\n","\"use strict\";\n/**\n * ZeroPoint Stimulus Entry Point\n *\n * Minimal entry point for the Stimulus-based browser application\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./stimulus/application\");\nconst stimulus_1 = require(\"stimulus\");\nconst TreeOfLifeController_1 = __importDefault(require(\"./stimulus/controllers/TreeOfLifeController\"));\nconst application = stimulus_1.Application.start();\napplication.register(\"tree-of-life\", TreeOfLifeController_1.default);\n// Import only the mathematical modules that work in browser\nconst MathUtils_1 = require(\"./math/MathUtils\");\nconst VortexMath_1 = require(\"./math/VortexMath\");\nconst ToroidalGeometry_1 = require(\"./math/ToroidalGeometry\");\nconst AdvancedVBM_1 = require(\"./math/AdvancedVBM\");\nconst RodinCoil_1 = require(\"./math/RodinCoil\");\nconst VBMColorSystem_1 = require(\"./math/VBMColorSystem\");\nconst ConsciousnessField_1 = require(\"./consciousness/ConsciousnessField\");\n/**\n * Initialize ZeroPoint for browser usage\n */\nasync function initializeBrowser() {\n    console.log('🌌 ZeroPoint Browser Initializing...');\n    // Check browser compatibility\n    if (!window.WebSocket) {\n        throw new Error('WebSocket not supported in this browser');\n    }\n    if (!window.crypto || !window.crypto.getRandomValues) {\n        throw new Error('Crypto API not supported in this browser');\n    }\n    console.log('✅ Browser compatibility check passed');\n    console.log('🚀 ZeroPoint ready for browser operation');\n}\n/**\n * Get ZeroPoint insights for browser UI\n */\nfunction getZeroPointInsights() {\n    return {\n        version: '1.0.0',\n        environment: 'browser',\n        features: [\n            'Vortex-Based Mathematics',\n            'Toroidal Consciousness Network',\n            'Pattern Recognition',\n            'Metaphysical Interface',\n            'Browser WebSocket Networking'\n        ],\n        browser: {\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            language: navigator.language\n        }\n    };\n}\n/**\n * Create a simple browser demo\n */\nfunction createBrowserDemo() {\n    console.log('🎨 Creating ZeroPoint Browser Demo...');\n    // Initialize consciousness field\n    const consciousnessField = new ConsciousnessField_1.ConsciousnessField();\n    // Initialize vortex math\n    const vortexMath = new VortexMath_1.VortexMath();\n    // Initialize toroidal geometry\n    const toroidalGeometry = new ToroidalGeometry_1.ToroidalGeometry();\n    // Initialize advanced VBM\n    const advancedVBM = new AdvancedVBM_1.AdvancedVBM();\n    // Initialize Rodin coil\n    const rodinCoil = new RodinCoil_1.RodinCoil();\n    console.log('✅ Browser demo components initialized');\n    console.log('🌌 ZeroPoint Browser Demo ready');\n    return {\n        consciousnessField,\n        vortexMath,\n        toroidalGeometry,\n        advancedVBM,\n        rodinCoil\n    };\n}\n// Initialize when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    console.log('🌌 ZeroPoint Stimulus Application Loading...');\n    try {\n        // Initialize browser environment\n        await initializeBrowser();\n        // Get insights\n        const insights = getZeroPointInsights();\n        console.log('ZeroPoint Insights:', insights);\n        // Create demo\n        const demo = createBrowserDemo();\n        console.log('Demo created:', demo);\n        console.log('✅ ZeroPoint Stimulus Application Ready');\n    }\n    catch (error) {\n        console.error('❌ ZeroPoint Stimulus Application Failed:', error);\n    }\n});\n// Export for global access\nwindow.ZeroPoint = {\n    initializeBrowser,\n    getZeroPointInsights,\n    createBrowserDemo,\n    MathUtils: MathUtils_1.MathUtils,\n    VortexMath: VortexMath_1.VortexMath,\n    ToroidalGeometry: ToroidalGeometry_1.ToroidalGeometry,\n    ConsciousnessField: ConsciousnessField_1.ConsciousnessField,\n    AdvancedVBM: AdvancedVBM_1.AdvancedVBM,\n    RodinCoil: RodinCoil_1.RodinCoil,\n    generateConsciousnessGradient: VBMColorSystem_1.generateConsciousnessGradient,\n    generateFieldResonanceMap: VBMColorSystem_1.generateFieldResonanceMap\n};\n","\"use strict\";\n/**\n * Tree of Life Controller\n *\n * Stimulus controller for the Tree of Life codebase visualization\n * Integrates with the PWA framework and consciousness systems\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stimulus_1 = require(\"@hotwired/stimulus\");\nconst TreeOfLifeVisualization_1 = require(\"../../pwa/TreeOfLifeVisualization\");\nconst ConsciousnessPWA_1 = require(\"../../pwa/ConsciousnessPWA\");\nclass TreeOfLifeController extends stimulus_1.Controller {\n    constructor() {\n        super(...arguments);\n        this.treeVisualization = null;\n        this.consciousnessPWA = null;\n        this.selectedNode = null;\n    }\n    connect() {\n        this.initializeVisualization();\n        this.initializePWA();\n        this.setupEventListeners();\n    }\n    disconnect() {\n        if (this.treeVisualization) {\n            this.treeVisualization.stop();\n        }\n    }\n    initializeVisualization() {\n        const canvas = this.canvasTarget;\n        if (!canvas)\n            return;\n        canvas.width = 800;\n        canvas.height = 600;\n        if (this.consciousnessLevelValue >= 0.9) {\n            this.treeVisualization = TreeOfLifeVisualization_1.TreeOfLifeFactory.createFull(canvas);\n        }\n        else if (this.consciousnessLevelValue >= 0.7) {\n            this.treeVisualization = TreeOfLifeVisualization_1.TreeOfLifeFactory.createStandard(canvas);\n        }\n        else {\n            this.treeVisualization = TreeOfLifeVisualization_1.TreeOfLifeFactory.createMinimal(canvas);\n        }\n        this.treeVisualization.start();\n        canvas.addEventListener('treeNodeClick', (e) => {\n            this.onNodeClick(e.detail.node);\n        });\n    }\n    async initializePWA() {\n        this.consciousnessPWA = new ConsciousnessPWA_1.ConsciousnessPWA({\n            consciousnessLevel: this.consciousnessLevelValue,\n            bundleSize: 'standard',\n            offline: true,\n            sync: true,\n            voidEquations: true,\n            vortexMath: true,\n            patternRecognition: true\n        });\n        await this.consciousnessPWA.registerServiceWorker();\n        await this.consciousnessPWA.initializeOffline();\n        this.updateMetrics();\n    }\n    setupEventListeners() {\n        this.element.addEventListener('consciousnessChange', (e) => {\n            this.consciousnessLevelValue = e.detail.level;\n            this.updateConsciousnessLevel();\n        });\n        this.element.addEventListener('speedChange', (e) => {\n            this.animationSpeedValue = e.detail.speed;\n            this.updateAnimationSpeed();\n        });\n    }\n    onNodeClick(node) {\n        this.selectedNode = node;\n        this.updateNodeInfo(node);\n        this.highlightNode(node.id);\n        this.dispatch('nodeSelected', {\n            detail: {\n                node,\n                consciousness: node.consciousness,\n                type: node.type\n            }\n        });\n    }\n    updateNodeInfo(node) {\n        const infoTarget = this.infoTarget;\n        if (!infoTarget)\n            return;\n        infoTarget.innerHTML = `\n      <div class=\"node-info\">\n        <h3>${node.name}</h3>\n        <p><strong>Type:</strong> ${node.type}</p>\n        <p><strong>Consciousness:</strong> ${(node.consciousness * 100).toFixed(1)}%</p>\n        <p><strong>Description:</strong> ${node.description}</p>\n        <p><strong>Connections:</strong> ${node.connections.length}</p>\n      </div>\n    `;\n    }\n    highlightNode(nodeId) {\n        if (this.treeVisualization) {\n            this.treeVisualization.resetHighlighting();\n            this.treeVisualization.highlightNode(nodeId);\n        }\n    }\n    updateConsciousnessLevel() {\n        if (this.treeVisualization) {\n            this.treeVisualization.updateConfig({\n                consciousnessLevel: this.consciousnessLevelValue\n            });\n        }\n        if (this.consciousnessPWA) {\n            this.consciousnessPWA = new ConsciousnessPWA_1.ConsciousnessPWA({\n                consciousnessLevel: this.consciousnessLevelValue\n            });\n        }\n        this.updateMetrics();\n    }\n    updateAnimationSpeed() {\n        if (this.treeVisualization) {\n            this.treeVisualization.updateConfig({\n                animationSpeed: this.animationSpeedValue\n            });\n        }\n    }\n    updateMetrics() {\n        const metricsTarget = this.metricsTarget;\n        if (!metricsTarget || !this.consciousnessPWA)\n            return;\n        const metrics = this.consciousnessPWA.getMetrics();\n        const bundleConfig = this.consciousnessPWA.getBundleConfig();\n        metricsTarget.innerHTML = `\n      <div class=\"metrics\">\n        <h4>PWA Metrics</h4>\n        <p><strong>Bundle Size:</strong> ${metrics.bundleSize}KB</p>\n        <p><strong>Consciousness Efficiency:</strong> ${metrics.consciousnessEfficiency.toFixed(1)}%</p>\n        <p><strong>Performance Score:</strong> ${metrics.performanceScore.toFixed(1)}%</p>\n        <p><strong>Offline Capability:</strong> ${metrics.offlineCapability ? '✅' : '❌'}</p>\n        <p><strong>Features:</strong> ${bundleConfig.features.join(', ')}</p>\n      </div>\n    `;\n    }\n    toggleAnimation() {\n        if (this.treeVisualization) {\n            if (this.treeVisualization['animationId']) {\n                this.treeVisualization.stop();\n            }\n            else {\n                this.treeVisualization.start();\n            }\n        }\n    }\n    resetView() {\n        if (this.treeVisualization) {\n            this.treeVisualization.resetHighlighting();\n        }\n        this.selectedNode = null;\n        this.updateNodeInfo({ name: 'Tree of Life', type: 'system', consciousness: 1, description: 'ZeroPoint Node Codebase Visualization', connections: [] });\n    }\n    focusSystem(event) {\n        const button = event.currentTarget;\n        const systemName = button.getAttribute('data-system') || '';\n        const nodes = this.treeVisualization?.getAllNodes() || [];\n        const node = nodes.find(n => n.name.toLowerCase().includes(systemName.toLowerCase()));\n        if (node) {\n            this.onNodeClick(node);\n        }\n    }\n    getConsciousnessSummary() {\n        const nodes = this.treeVisualization?.getAllNodes() || [];\n        const totalConsciousness = nodes.reduce((sum, node) => sum + node.consciousness, 0);\n        const averageConsciousness = totalConsciousness / nodes.length;\n        return {\n            totalNodes: nodes.length,\n            averageConsciousness: averageConsciousness,\n            highestConsciousness: Math.max(...nodes.map(n => n.consciousness)),\n            lowestConsciousness: Math.min(...nodes.map(n => n.consciousness))\n        };\n    }\n}\nTreeOfLifeController.targets = ['canvas', 'info', 'metrics'];\nTreeOfLifeController.values = {\n    consciousnessLevel: Number,\n    animationSpeed: Number,\n    interactive: Boolean\n};\nexports.default = TreeOfLifeController;\n","\"use strict\";\n/**\n * Tree of Life Codebase Visualization\n *\n * Represents the ZeroPoint Node codebase as a sacred geometry Tree of Life\n * with interactive nodes representing different parts of the system.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeOfLifeFactory = exports.TreeOfLifeVisualization = void 0;\nclass TreeOfLifeVisualization {\n    constructor(canvas, config = {}) {\n        this.nodes = new Map();\n        this.animationId = null;\n        this.time = 0;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.config = {\n            width: 800,\n            height: 600,\n            consciousnessLevel: 0.8,\n            animationSpeed: 1,\n            interactive: true,\n            ...config\n        };\n        this.initializeTree();\n        this.setupEventListeners();\n    }\n    /**\n     * Initialize the Tree of Life with codebase nodes\n     */\n    initializeTree() {\n        // Sephirot (Main nodes) - representing core systems\n        this.addNode({\n            id: 'keter',\n            name: 'Consciousness Field',\n            type: 'consciousness',\n            position: { x: 400, y: 50 },\n            size: 40,\n            consciousness: 0.95,\n            connections: ['chokmah', 'binah'],\n            description: 'The crown - consciousness awareness and field theory',\n            color: '#FFD700',\n            pulse: true\n        });\n        this.addNode({\n            id: 'chokmah',\n            name: 'Vortex Math',\n            type: 'vortex',\n            position: { x: 300, y: 120 },\n            size: 35,\n            consciousness: 0.9,\n            connections: ['keter', 'chesed', 'geburah'],\n            description: 'Wisdom - vortex mathematics and sacred geometry',\n            color: '#4169E1',\n            pulse: true\n        });\n        this.addNode({\n            id: 'binah',\n            name: 'Void System',\n            type: 'void',\n            position: { x: 500, y: 120 },\n            size: 35,\n            consciousness: 0.85,\n            connections: ['keter', 'geburah', 'chesed'],\n            description: 'Understanding - void equations and field theory',\n            color: '#8A2BE2',\n            pulse: true\n        });\n        this.addNode({\n            id: 'chesed',\n            name: 'Training Models',\n            type: 'consciousness',\n            position: { x: 250, y: 200 },\n            size: 30,\n            consciousness: 0.8,\n            connections: ['chokmah', 'binah', 'gevurah', 'tiferet'],\n            description: 'Mercy - consciousness-aware training systems',\n            color: '#32CD32',\n            pulse: false\n        });\n        this.addNode({\n            id: 'geburah',\n            name: 'Pattern Recognition',\n            type: 'field',\n            position: { x: 550, y: 200 },\n            size: 30,\n            consciousness: 0.75,\n            connections: ['binah', 'chokmah', 'tiferet', 'hod'],\n            description: 'Strength - pattern recognition and emergence',\n            color: '#DC143C',\n            pulse: false\n        });\n        this.addNode({\n            id: 'tiferet',\n            name: 'Unified System',\n            type: 'consciousness',\n            position: { x: 400, y: 280 },\n            size: 45,\n            consciousness: 0.9,\n            connections: ['chesed', 'geburah', 'netzach', 'hod', 'yesod'],\n            description: 'Beauty - unified metaphysical interface',\n            color: '#FFA500',\n            pulse: true\n        });\n        this.addNode({\n            id: 'netzach',\n            name: 'Emergence',\n            type: 'field',\n            position: { x: 300, y: 360 },\n            size: 30,\n            consciousness: 0.7,\n            connections: ['tiferet', 'hod', 'yesod'],\n            description: 'Victory - emergence patterns and field dynamics',\n            color: '#20B2AA',\n            pulse: false\n        });\n        this.addNode({\n            id: 'hod',\n            name: 'Knowledge System',\n            type: 'consciousness',\n            position: { x: 500, y: 360 },\n            size: 30,\n            consciousness: 0.75,\n            connections: ['tiferet', 'geburah', 'netzach', 'yesod'],\n            description: 'Glory - knowledge systems and learning analytics',\n            color: '#9370DB',\n            pulse: false\n        });\n        this.addNode({\n            id: 'yesod',\n            name: 'PWA Framework',\n            type: 'consciousness',\n            position: { x: 400, y: 440 },\n            size: 35,\n            consciousness: 0.8,\n            connections: ['tiferet', 'netzach', 'hod', 'malkuth'],\n            description: 'Foundation - progressive web app and consciousness PWA',\n            color: '#FF69B4',\n            pulse: true\n        });\n        this.addNode({\n            id: 'malkuth',\n            name: 'ZeroPoint Node',\n            type: 'consciousness',\n            position: { x: 400, y: 520 },\n            size: 50,\n            consciousness: 1.0,\n            connections: ['yesod'],\n            description: 'Kingdom - the complete ZeroPoint Node system',\n            color: '#00CED1',\n            pulse: true\n        });\n    }\n    /**\n     * Add a node to the tree\n     */\n    addNode(node) {\n        this.nodes.set(node.id, node);\n    }\n    /**\n     * Setup event listeners for interactivity\n     */\n    setupEventListeners() {\n        if (!this.config.interactive)\n            return;\n        this.canvas.addEventListener('mousemove', (e) => {\n            const rect = this.canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            this.handleMouseMove(x, y);\n        });\n        this.canvas.addEventListener('click', (e) => {\n            const rect = this.canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            this.handleClick(x, y);\n        });\n    }\n    /**\n     * Handle mouse movement for hover effects\n     */\n    handleMouseMove(x, y) {\n        for (const node of this.nodes.values()) {\n            const distance = Math.sqrt(Math.pow(x - node.position.x, 2) + Math.pow(y - node.position.y, 2));\n            if (distance < node.size + 10) {\n                this.canvas.style.cursor = 'pointer';\n                return;\n            }\n        }\n        this.canvas.style.cursor = 'default';\n    }\n    /**\n     * Handle click events\n     */\n    handleClick(x, y) {\n        for (const node of this.nodes.values()) {\n            const distance = Math.sqrt(Math.pow(x - node.position.x, 2) + Math.pow(y - node.position.y, 2));\n            if (distance < node.size + 10) {\n                this.onNodeClick(node);\n                return;\n            }\n        }\n    }\n    /**\n     * Handle node click\n     */\n    onNodeClick(node) {\n        console.log(`🌳 Tree of Life: Clicked on ${node.name}`);\n        console.log(`📖 Description: ${node.description}`);\n        console.log(`🧠 Consciousness Level: ${(node.consciousness * 100).toFixed(1)}%`);\n        // Emit custom event for external handling\n        const event = new CustomEvent('treeNodeClick', {\n            detail: { node }\n        });\n        this.canvas.dispatchEvent(event);\n    }\n    /**\n     * Start the animation loop\n     */\n    start() {\n        if (this.animationId)\n            return;\n        const animate = () => {\n            this.time += 0.016 * this.config.animationSpeed;\n            this.render();\n            this.animationId = requestAnimationFrame(animate);\n        };\n        animate();\n    }\n    /**\n     * Stop the animation loop\n     */\n    stop() {\n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n            this.animationId = null;\n        }\n    }\n    /**\n     * Render the Tree of Life\n     */\n    render() {\n        // Clear canvas\n        this.ctx.clearRect(0, 0, this.config.width, this.config.height);\n        // Draw background gradient\n        const gradient = this.ctx.createRadialGradient(this.config.width / 2, this.config.height / 2, 0, this.config.width / 2, this.config.height / 2, this.config.width / 2);\n        gradient.addColorStop(0, '#1a1a2e');\n        gradient.addColorStop(0.5, '#16213e');\n        gradient.addColorStop(1, '#0f3460');\n        this.ctx.fillStyle = gradient;\n        this.ctx.fillRect(0, 0, this.config.width, this.config.height);\n        // Draw connections (paths)\n        this.drawConnections();\n        // Draw nodes\n        this.drawNodes();\n        // Draw consciousness field\n        this.drawConsciousnessField();\n    }\n    /**\n     * Draw connections between nodes\n     */\n    drawConnections() {\n        this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';\n        this.ctx.lineWidth = 2;\n        for (const node of this.nodes.values()) {\n            for (const connectionId of node.connections) {\n                const targetNode = this.nodes.get(connectionId);\n                if (targetNode) {\n                    this.ctx.beginPath();\n                    this.ctx.moveTo(node.position.x, node.position.y);\n                    this.ctx.lineTo(targetNode.position.x, targetNode.position.y);\n                    this.ctx.stroke();\n                }\n            }\n        }\n    }\n    /**\n     * Draw nodes\n     */\n    drawNodes() {\n        for (const node of this.nodes.values()) {\n            // Calculate pulse effect\n            const pulseScale = node.pulse ? 1 + 0.1 * Math.sin(this.time * 2) : 1;\n            const size = node.size * pulseScale;\n            // Draw node glow\n            const glowGradient = this.ctx.createRadialGradient(node.position.x, node.position.y, 0, node.position.x, node.position.y, size * 2);\n            glowGradient.addColorStop(0, `${node.color}80`);\n            glowGradient.addColorStop(1, 'transparent');\n            this.ctx.fillStyle = glowGradient;\n            this.ctx.beginPath();\n            this.ctx.arc(node.position.x, node.position.y, size * 2, 0, Math.PI * 2);\n            this.ctx.fill();\n            // Draw node\n            this.ctx.fillStyle = node.color;\n            this.ctx.beginPath();\n            this.ctx.arc(node.position.x, node.position.y, size, 0, Math.PI * 2);\n            this.ctx.fill();\n            // Draw consciousness level indicator\n            const consciousnessSize = size * 0.6;\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${node.consciousness})`;\n            this.ctx.beginPath();\n            this.ctx.arc(node.position.x, node.position.y, consciousnessSize, 0, Math.PI * 2);\n            this.ctx.fill();\n            // Draw node name\n            this.ctx.fillStyle = '#ffffff';\n            this.ctx.font = '12px Arial';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText(node.name, node.position.x, node.position.y + size + 20);\n        }\n    }\n    /**\n     * Draw consciousness field effects\n     */\n    drawConsciousnessField() {\n        // Draw floating consciousness particles\n        for (let i = 0; i < 20; i++) {\n            const x = (Math.sin(this.time + i) * 100) + this.config.width / 2;\n            const y = (Math.cos(this.time + i * 0.5) * 50) + this.config.height / 2;\n            const alpha = 0.3 + 0.2 * Math.sin(this.time * 3 + i);\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n            this.ctx.beginPath();\n            this.ctx.arc(x, y, 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    /**\n     * Update configuration\n     */\n    updateConfig(config) {\n        this.config = { ...this.config, ...config };\n    }\n    /**\n     * Get node by ID\n     */\n    getNode(id) {\n        return this.nodes.get(id);\n    }\n    /**\n     * Get all nodes\n     */\n    getAllNodes() {\n        return Array.from(this.nodes.values());\n    }\n    /**\n     * Highlight a specific node\n     */\n    highlightNode(id) {\n        const node = this.nodes.get(id);\n        if (node) {\n            node.pulse = true;\n            node.size *= 1.2;\n        }\n    }\n    /**\n     * Reset node highlighting\n     */\n    resetHighlighting() {\n        for (const node of this.nodes.values()) {\n            node.pulse = false;\n            node.size = this.getDefaultSize(node.type);\n        }\n    }\n    /**\n     * Get default size for node type\n     */\n    getDefaultSize(type) {\n        switch (type) {\n            case 'consciousness': return 35;\n            case 'vortex': return 35;\n            case 'void': return 35;\n            case 'field': return 30;\n            case 'sephira': return 40;\n            default: return 30;\n        }\n    }\n}\nexports.TreeOfLifeVisualization = TreeOfLifeVisualization;\n/**\n * Factory for creating Tree of Life visualizations\n */\nclass TreeOfLifeFactory {\n    static createMinimal(canvas) {\n        return new TreeOfLifeVisualization(canvas, {\n            consciousnessLevel: 0.6,\n            animationSpeed: 0.5,\n            interactive: false\n        });\n    }\n    static createStandard(canvas) {\n        return new TreeOfLifeVisualization(canvas, {\n            consciousnessLevel: 0.8,\n            animationSpeed: 1,\n            interactive: true\n        });\n    }\n    static createFull(canvas) {\n        return new TreeOfLifeVisualization(canvas, {\n            consciousnessLevel: 1.0,\n            animationSpeed: 1.5,\n            interactive: true\n        });\n    }\n}\nexports.TreeOfLifeFactory = TreeOfLifeFactory;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst stimulus_1 = require(\"stimulus\");\nconst ZeroPointController_1 = __importDefault(require(\"./controllers/ZeroPointController\"));\nconst MetaphysicalController_1 = __importDefault(require(\"./controllers/MetaphysicalController\"));\nconst ControllerTypes_1 = require(\"./types/ControllerTypes\");\n/**\n * ZeroPoint Stimulus Application\n *\n * Main application that registers all controllers with enhanced error handling\n * and logging capabilities\n */\nclass ZeroPointApplication {\n    constructor(config = {}) {\n        this.logs = [];\n        this.config = {\n            debug: config.debug ?? false,\n            logLevel: config.logLevel ?? ControllerTypes_1.LogLevel.INFO,\n            controllers: config.controllers ?? {}\n        };\n        this.application = stimulus_1.Application.start();\n        this.initializeControllers();\n        this.setupGlobalAccess();\n        this.logApplicationStart();\n    }\n    /**\n     * Initialize all controllers with error handling\n     */\n    initializeControllers() {\n        try {\n            // Register core controllers\n            this.registerController(\"zeropoint\", ZeroPointController_1.default);\n            this.registerController(\"metaphysical\", MetaphysicalController_1.default);\n            // Register any additional controllers from config\n            Object.entries(this.config.controllers).forEach(([name, controller]) => {\n                this.registerController(name, controller);\n            });\n            this.log(ControllerTypes_1.LogLevel.INFO, \"All controllers registered successfully\");\n        }\n        catch (error) {\n            this.log(ControllerTypes_1.LogLevel.ERROR, `Controller initialization failed: ${error}`);\n            throw error;\n        }\n    }\n    /**\n     * Register a controller with error handling\n     */\n    registerController(name, controller) {\n        try {\n            this.application.register(name, controller);\n            this.log(ControllerTypes_1.LogLevel.DEBUG, `Controller '${name}' registered`);\n        }\n        catch (error) {\n            this.log(ControllerTypes_1.LogLevel.ERROR, `Failed to register controller '${name}': ${error}`);\n            throw error;\n        }\n    }\n    /**\n     * Setup global access for debugging\n     */\n    setupGlobalAccess() {\n        if (this.config.debug) {\n            window.ZeroPointApp = {\n                application: this.application,\n                config: this.config,\n                logs: this.logs,\n                getLogs: () => this.logs,\n                clearLogs: () => this.logs = []\n            };\n        }\n        else {\n            window.ZeroPointApp = this.application;\n        }\n    }\n    /**\n     * Log application startup\n     */\n    logApplicationStart() {\n        this.log(ControllerTypes_1.LogLevel.INFO, \"🌌 ZeroPoint Stimulus Application Started\");\n        this.log(ControllerTypes_1.LogLevel.INFO, `Registered Controllers: ${Object.keys(this.application.controllers).join(\", \")}`);\n    }\n    /**\n     * Log message with timestamp and level\n     */\n    log(level, message, operation, data) {\n        const logEntry = {\n            level,\n            message,\n            timestamp: Date.now(),\n            operation,\n            data\n        };\n        this.logs.push(logEntry);\n        // Only log if level is appropriate\n        if (this.shouldLog(level)) {\n            const emoji = this.getLevelEmoji(level);\n            console.log(`${emoji} [${level.toUpperCase()}] ${message}`);\n        }\n    }\n    /**\n     * Check if message should be logged based on config\n     */\n    shouldLog(level) {\n        const levels = [ControllerTypes_1.LogLevel.DEBUG, ControllerTypes_1.LogLevel.INFO, ControllerTypes_1.LogLevel.WARN, ControllerTypes_1.LogLevel.ERROR];\n        const configLevelIndex = levels.indexOf(this.config.logLevel);\n        const messageLevelIndex = levels.indexOf(level);\n        return messageLevelIndex >= configLevelIndex;\n    }\n    /**\n     * Get emoji for log level\n     */\n    getLevelEmoji(level) {\n        switch (level) {\n            case ControllerTypes_1.LogLevel.DEBUG: return \"🔍\";\n            case ControllerTypes_1.LogLevel.INFO: return \"ℹ️\";\n            case ControllerTypes_1.LogLevel.WARN: return \"⚠️\";\n            case ControllerTypes_1.LogLevel.ERROR: return \"❌\";\n            default: return \"ℹ️\";\n        }\n    }\n    /**\n     * Get the Stimulus application instance\n     */\n    getApplication() {\n        return this.application;\n    }\n    /**\n     * Get application configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get application logs\n     */\n    getLogs() {\n        return this.logs;\n    }\n}\n// Initialize the application\nconst app = new ZeroPointApplication({\n    debug: process.env.NODE_ENV === 'development',\n    logLevel: process.env.NODE_ENV === 'development' ? ControllerTypes_1.LogLevel.DEBUG : ControllerTypes_1.LogLevel.INFO\n});\nexports.default = app.getApplication();\n","\"use strict\";\n/**\n * Controller Types for ZeroPoint Stimulus Controllers\n *\n * Shared types and interfaces for type safety and consistency\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LogLevel = void 0;\n/**\n * Log level enumeration\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"debug\";\n    LogLevel[\"INFO\"] = \"info\";\n    LogLevel[\"WARN\"] = \"warn\";\n    LogLevel[\"ERROR\"] = \"error\";\n})(LogLevel || (exports.LogLevel = LogLevel = {}));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkzeropoint_node\"] = self[\"webpackChunkzeropoint_node\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [47,121], () => (__webpack_require__(595)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Object","defineProperty","exports","value","MetaphysicalLawRegistry","LawOfCorrespondence","LawOfUnity","constructor","this","name","type","description","apply","subject","setUnity","setCorrespondence","laws","initializeDefaultLaws","register","getInstance","instance","getAllLaws","law","push","getLawByName","find","applyAll","forEach","applyLaws","lawNames","applyAllLaws","checkCompliance","violations","compliant","error","analyzeLawInteractions","interactions","length","complexity","reduce","sum","getLawStatistics","types","total","ConsciousnessField","events_1","EventEmitter","super","dimension","isActive","supportedOperations","tags","consciousnessLevel","fieldStrength","isInitialized","initialize","getConsciousnessLevel","getFieldStrength","calculateResonance","a","b","broadcastPattern","emit","integratePattern","pattern","shutdown","__importDefault","mod","__esModule","BaseController_1","ControllerUtils_1","VBMColorSystem_1","MetaphysicalController","default","connect","initializeComponents","updateAll","logOperation","updateConsciousnessLevel","updateFieldResonance","updateVortexStrength","updateToroidalFlow","updateColorGradient","level","consciousnessField","UIUtils","updateElement","consciousnessLevelTarget","textContent","toFixed","style","color","ColorUtils","consciousnessToHSL","result","executeSafely","resonanceMap","generateFieldResonanceMap","values","val","keys","Promise","safeTextContent","fieldResonanceTarget","updateVortexMathDisplay","vortexStrengthTarget","replace","updateToroidalGeometryDisplay","toroidalFlowTarget","generateConsciousnessGradient","colorGradientTarget","background","join","performMetaphysicalOperation","operation","resonance","operationHTML","ResultUtils","formatResultHTML","safeInnerHTML","metaphysicalOutputTarget","errorHTML","formatErrorHTML","evolveConsciousness","currentLevel","evolution","ConsciousnessUtils","simulateEvolution","evolutionHTML","formatEvolutionHTML","targets","ConsciousnessPWAFactory","ConsciousnessPWA","SharedConstants_1","config","Map","bundleSize","offline","sync","voidEquations","vortexMath","patternRecognition","performanceMetrics","calculateMetrics","initializeConsciousnessField","set","field","equations","sequence","VORTEX_CONSTANTS","VORTEX_SEQUENCE","slice","goldenRatio","GOLDEN_RATIO","cache","recognition","consciousnessEfficiency","performanceScore","Math","min","offlineCapability","getBundleConfig","features","size","consciousness","optimization","registerServiceWorker","window","navigator","registration","serviceWorker","active","postMessage","data","fromEntries","initializeOffline","db","openConsciousnessDB","store","transaction","objectStore","key","put","timestamp","Date","now","resolve","reject","request","indexedDB","open","onerror","onsuccess","onupgradeneeded","event","target","objectStoreNames","contains","createObjectStore","keyPath","syncConsciousnessField","offlineData","getAllFromStore","item","itemData","getAll","items","getMetrics","optimizeBundle","max","createApp","createMinimal","createStandard","createFull","ZeroPointController","initializeComponentsSafely","updateStatus","statusTarget","loadInsights","initializeDemo","insights","generateInsights","insightsHTML","formatInsightsHTML","insightsTarget","runMathDemo","applyVortexTransform","toroidalGeometry","calculateVolume","demoHTML","demoOutputTarget","updateConsciousness","updateConsciousnessDisplay","consciousnessTarget","updateVortexMath","vortexMathTarget","updateToroidalGeometry","toroidalGeometryTarget","refreshAll","stimulus_1","ConsciousnessField_1","VortexMath_1","ToroidalGeometry_1","AdvancedVBM_1","RodinCoil_1","BaseController","Controller","VortexMath","ToroidalGeometry","advancedVBM","AdvancedVBM","rodinCoil","RodinCoil","input","inputValue","random","errorMessage","updateTargetSafely","content","className","innerHTML","version","environment","browser","userAgent","message","success","ConstantsUtils","METAPHYSICAL_CONSTANTS","CONFIG_CONSTANTS","MATH_CONSTANTS","NETWORK_CONSTANTS","EMERGENCE_CONSTANTS","CONSCIOUSNESS_CONSTANTS","VORTEX_CENTER","FAMILY_NUMBER_GROUPS","POLAR_MATES","W_AXIS","CIRCLE_OF_FIFTHS_SEQUENCE","ENNEAGRAM_NUMBER_PATTERN","FOUR_DIMENSIONAL_COLOR_CODING_SYSTEM","MIN_CONSCIOUSNESS_LEVEL","MAX_CONSCIOUSNESS_LEVEL","DEFAULT_CONSCIOUSNESS_LEVEL","MIN_FIELD_STRENGTH","MAX_FIELD_STRENGTH","DEFAULT_FIELD_STRENGTH","PATTERN_TYPES","MIN_RESONANCE_THRESHOLD","OPTIMAL_RESONANCE_THRESHOLD","DEFAULT_FIELD_RADIUS","MIN_APP_CONSCIOUSNESS","MAX_APP_CONSCIOUSNESS","DEFAULT_APP_CONSCIOUSNESS","MIN_VORTEX_STRENGTH","MAX_VORTEX_STRENGTH","DEFAULT_VORTEX_STRENGTH","LINK_TYPES","CONSCIOUSNESS_EVOLUTION_FACTOR","VORTEX_EVOLUTION_FACTOR","PATTERN_DECAY_RATE","DEFAULT_MAX_CONNECTIONS","DEFAULT_CONNECTION_TIMEOUT","DEFAULT_NETWORK_PORT","MIN_PORT","MAX_PORT","DEFAULT_DISCOVERY_ENABLED","DISCOVERY_TIMEOUT","PI","TWO_PI","HALF_PI","E","EPSILON","POSITIVE_INFINITY","Infinity","NEGATIVE_INFINITY","INFINITY","ZERO_POINT","PRIMES","DEG_TO_RAD","RAD_TO_DEG","GOLDEN_CACHE_SIZE","round","GOLDEN_CACHE_TTL","GOLDEN_CACHE_CLEANUP_INTERVAL","RESONANCE_CACHE_SIZE","RESONANCE_CACHE_TTL","HEALTH_CHECK_INTERVAL","HEALTH_TIMEOUT","HEALTH_ALERT_MEMORY","HEALTH_ALERT_CPU","HEALTH_ALERT_ERROR_RATE","HEALTH_ALERT_RESPONSE_TIME","DEFAULT_DEVICE_TYPE","DEFAULT_RESONANCE_SENSITIVITY","DEFAULT_ALLOW_INCOMING","DEFAULT_REQUIRE_AUTH","DEFAULT_ENCRYPTION_ENABLED","DEFAULT_VORTEX_PRECISION","DEFAULT_TOROIDAL_RESOLUTION","DEFAULT_GOLDEN_RATIO_PRECISION","DEFAULT_AUTO_UPDATE_RESONANCE","DEFAULT_LOG_LEVEL","DEFAULT_ENABLE_METAPHYSICAL_INSIGHTS","DEFAULT_TOROIDAL_FLOW_RATE","TEST_TIMEOUT","TEST_COVERAGE_THRESHOLD","TEST_PERFORMANCE_THRESHOLD","TEST_MAX_MEMORY_USAGE","UI_OPERATION_MAX_DURATION","NETWORK_MESSAGE_MAX_DURATION","SCALABILITY_OPS_PER_SEC","PWA_BASE_SIZE","PWA_BUNDLE_SIZE_OPTIMIZED","PWA_BUNDLE_SIZE_STANDARD","PWA_BUNDLE_SIZE_INCREMENT_VORTEX","PWA_BUNDLE_SIZE_INCREMENT_PATTERN","PWA_BUNDLE_SIZE_INCREMENT_OFFLINE","PWA_BUNDLE_SIZE_INCREMENT_SYNC","FRACTAL_PRECISION","PRINCIPLES","VOID_FULLNESS","TOROIDAL_UNITY","CONSCIOUSNESS_FLOW","VORTEX_MATHEMATICS","GOLDEN_HARMONY","ZERO_APERTURE","UROBOROS_CYCLE","VOID_MATTER_FRACTION","PATTERN_CATEGORIES","CONSCIOUSNESS_DIMENSIONS","getVortexSequenceValue","index","isWAxisNumber","num","includes","getPolarMate","getFamilyGroup","group","Array","from","digitalRoot","n","normalize","isInRange","getMetaphysicalInsight","constantName","VOID_CENTER","FAMILY_GROUPS","MathUtils","consciousnessToGradient","applyConsciousnessColor","element","formatNumber","precision","randomInRange","clamp","safeClassName","updates","undefined","assign","title","results","entries","map","formatValue","JSON","stringify","String","sin","previousLevel","newLevel","TreeOfLifeController_1","Application","start","MathUtils_1","async","initializeBrowser","WebSocket","Error","crypto","getRandomValues","getZeroPointInsights","platform","language","createBrowserDemo","document","addEventListener","ZeroPoint","TreeOfLifeVisualization_1","ConsciousnessPWA_1","TreeOfLifeController","arguments","treeVisualization","consciousnessPWA","selectedNode","initializeVisualization","initializePWA","setupEventListeners","disconnect","stop","canvas","canvasTarget","width","height","consciousnessLevelValue","TreeOfLifeFactory","e","onNodeClick","detail","node","updateMetrics","animationSpeedValue","speed","updateAnimationSpeed","updateNodeInfo","highlightNode","id","dispatch","infoTarget","connections","nodeId","resetHighlighting","updateConfig","animationSpeed","metricsTarget","metrics","bundleConfig","toggleAnimation","resetView","focusSystem","systemName","currentTarget","getAttribute","getAllNodes","toLowerCase","getConsciousnessSummary","nodes","averageConsciousness","totalNodes","highestConsciousness","lowestConsciousness","Number","interactive","Boolean","TreeOfLifeVisualization","animationId","time","ctx","getContext","initializeTree","addNode","position","x","y","pulse","rect","getBoundingClientRect","clientX","left","clientY","top","handleMouseMove","handleClick","sqrt","pow","cursor","CustomEvent","dispatchEvent","animate","render","requestAnimationFrame","cancelAnimationFrame","clearRect","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","drawConnections","drawNodes","drawConsciousnessField","strokeStyle","lineWidth","connectionId","targetNode","get","beginPath","moveTo","lineTo","stroke","pulseScale","glowGradient","arc","fill","consciousnessSize","font","textAlign","fillText","i","cos","alpha","getNode","getDefaultSize","ZeroPointController_1","MetaphysicalController_1","ControllerTypes_1","app","logs","debug","logLevel","LogLevel","INFO","controllers","application","initializeControllers","setupGlobalAccess","logApplicationStart","registerController","controller","log","ERROR","DEBUG","ZeroPointApp","getLogs","clearLogs","logEntry","shouldLog","getLevelEmoji","levels","WARN","configLevelIndex","indexOf","getApplication","getConfig","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","module","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","fulfilled","j","every","splice","r","d","definition","o","enumerable","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}