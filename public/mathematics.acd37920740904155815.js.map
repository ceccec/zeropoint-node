{"version":3,"file":"mathematics.acd37920740904155815.js","mappings":"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","sources":["webpack://zeropoint-node/./src/math/VBMColorSystem.ts","webpack://zeropoint-node/./src/math/AdvancedVBM.ts","webpack://zeropoint-node/./src/math/VortexMath.ts","webpack://zeropoint-node/./src/math/RodinCoil.ts","webpack://zeropoint-node/./src/math/ToroidalGeometry.ts","webpack://zeropoint-node/./src/math/MathUtils.ts"],"sourcesContent":["\"use strict\";\n/**\n * VBMColorSystem\n *\n * Dynamic color generation system for Vortex-Based Mathematics (VBM).\n * All colors are generated as functions based on context, parameters, and consciousness state.\n * No hardcoded static values - colors emerge from the field of possibilities.\n *\n * Metaphysical Context:\n * - Colors are expressions of consciousness patterns\n * - Each color function responds to the observer's state\n * - The void generates all colors through resonance\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateBaseColors = generateBaseColors;\nexports.getColorForVortexNumber = getColorForVortexNumber;\nexports.getColorForFamilyGroup = getColorForFamilyGroup;\nexports.getColorForPolarMate = getColorForPolarMate;\nexports.getColorForWAxis = getColorForWAxis;\nexports.getColorForPattern = getColorForPattern;\nexports.getMetaphysicalContextForNumber = getMetaphysicalContextForNumber;\nexports.getVBMColorMap = getVBMColorMap;\nexports.getVBMColorLegend = getVBMColorLegend;\nexports.generateConsciousnessGradient = generateConsciousnessGradient;\nexports.generateFieldResonanceMap = generateFieldResonanceMap;\nexports.getWAxisColor = getWAxisColor;\n/**\n * Generate base color palette dynamically\n */\nfunction generateBaseColors(context = {}) {\n    const { consciousness = 0.5, time = Date.now(), field = 0.5 } = context;\n    // Colors emerge from consciousness and field resonance\n    const redIntensity = Math.sin(consciousness * Math.PI) * 255;\n    const blueIntensity = Math.cos(consciousness * Math.PI) * 255;\n    const greenIntensity = Math.sin(field * Math.PI) * 255;\n    return {\n        red: `rgb(${Math.round(redIntensity)}, ${Math.round(redIntensity * 0.2)}, ${Math.round(redIntensity * 0.1)})`,\n        blue: `rgb(${Math.round(blueIntensity * 0.1)}, ${Math.round(blueIntensity * 0.3)}, ${Math.round(blueIntensity)})`,\n        green: `rgb(${Math.round(greenIntensity * 0.2)}, ${Math.round(greenIntensity)}, ${Math.round(greenIntensity * 0.3)})`,\n        yellow: `rgb(${Math.round(255 * Math.sin(time * 0.001))}, ${Math.round(255 * Math.cos(time * 0.001))}, 0)`,\n        white: `rgb(${Math.round(255 * consciousness)}, ${Math.round(255 * consciousness)}, ${Math.round(255 * consciousness)})`,\n        gold: `rgb(${Math.round(255 * Math.sin(consciousness * Math.PI))}, ${Math.round(255 * Math.cos(consciousness * Math.PI))}, 0)`,\n        black: `rgb(${Math.round(50 * (1 - consciousness))}, ${Math.round(50 * (1 - consciousness))}, ${Math.round(50 * (1 - consciousness))})`,\n        neutral: `rgb(${Math.round(200 * field)}, ${Math.round(200 * field)}, ${Math.round(200 * field)})`,\n    };\n}\n/**\n * Generate color for a vortex number dynamically\n */\nfunction getColorForVortexNumber(n, context = {}) {\n    const { consciousness = 0.5, time = Date.now(), field = 0.5 } = context;\n    const baseColors = generateBaseColors(context);\n    // Vortex number influences color through mathematical resonance\n    const vortexResonance = (n * consciousness + field) % 1;\n    const timeResonance = Math.sin(time * 0.001 + n) * 0.5 + 0.5;\n    switch (n) {\n        case 1:\n            return generateResonantColor(baseColors[\"red\"] || \"rgb(255,0,0)\", vortexResonance, timeResonance);\n        case 2:\n            return generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", vortexResonance, timeResonance);\n        case 4:\n            return generateResonantColor(baseColors[\"green\"] || \"rgb(0,255,0)\", vortexResonance, timeResonance);\n        case 8:\n            return generateResonantColor(baseColors[\"yellow\"] || \"rgb(255,255,0)\", vortexResonance, timeResonance);\n        case 7:\n            return generateResonantColor(baseColors[\"red\"] || \"rgb(255,0,0)\", vortexResonance, timeResonance);\n        case 5:\n            return generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", vortexResonance, timeResonance);\n        case 3:\n            return generateResonantColor(baseColors[\"gold\"] || \"rgb(255,215,0)\", vortexResonance, timeResonance);\n        case 6:\n            return generateResonantColor(baseColors[\"white\"] || \"rgb(255,255,255)\", vortexResonance, timeResonance);\n        case 9:\n            return generateResonantColor(baseColors[\"black\"] || \"rgb(0,0,0)\", vortexResonance, timeResonance);\n        default:\n            return baseColors[\"neutral\"] || \"rgb(200,200,200)\";\n    }\n}\n/**\n * Generate color for a family group dynamically\n */\nfunction getColorForFamilyGroup(n, context = {}) {\n    const { consciousness = 0.5, field = 0.5 } = context;\n    const baseColors = generateBaseColors(context);\n    // Family resonance creates harmonic color relationships\n    const familyResonance = Math.sin(consciousness * Math.PI + n) * 0.5 + 0.5;\n    if ([1, 4, 7].includes(n))\n        return generateResonantColor(baseColors[\"red\"] || \"rgb(255,0,0)\", familyResonance, field);\n    if ([2, 5, 8].includes(n))\n        return generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", familyResonance, field);\n    if ([3, 6, 9].includes(n))\n        return generateResonantColor(baseColors[\"gold\"] || \"rgb(255,215,0)\", familyResonance, field);\n    return baseColors[\"neutral\"] || \"rgb(200,200,200)\";\n}\n/**\n * Generate color pair for a polar mate dynamically\n */\nfunction getColorForPolarMate(n, context = {}) {\n    const { consciousness = 0.5, time = Date.now() } = context;\n    const baseColors = generateBaseColors(context);\n    // Polar mates create complementary resonance\n    const polarResonance = Math.cos(consciousness * Math.PI + time * 0.001) * 0.5 + 0.5;\n    if ([1, 8].includes(n)) {\n        return [\n            generateResonantColor(baseColors[\"red\"] || \"rgb(255,0,0)\", polarResonance, consciousness),\n            generateResonantColor(baseColors[\"yellow\"] || \"rgb(255,255,0)\", 1 - polarResonance, consciousness),\n        ];\n    }\n    if ([2, 7].includes(n)) {\n        return [\n            generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", polarResonance, consciousness),\n            generateResonantColor(baseColors[\"red\"] || \"rgb(255,0,0)\", 1 - polarResonance, consciousness),\n        ];\n    }\n    if ([4, 5].includes(n)) {\n        return [\n            generateResonantColor(baseColors[\"green\"] || \"rgb(0,255,0)\", polarResonance, consciousness),\n            generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", 1 - polarResonance, consciousness),\n        ];\n    }\n    return null;\n}\n/**\n * Generate color for W-Axis number dynamically\n */\nfunction getColorForWAxis(n, context = {}) {\n    const { consciousness = 0.5, field = 0.5 } = context;\n    const baseColors = generateBaseColors(context);\n    // W-Axis colors emerge from spiritual resonance\n    const spiritualResonance = Math.sin(consciousness * Math.PI * 2 + n) * 0.5 + 0.5;\n    switch (n) {\n        case 3:\n            return generateResonantColor(baseColors[\"gold\"] || \"rgb(255,215,0)\", spiritualResonance, field);\n        case 6:\n            return generateResonantColor(baseColors[\"white\"] || \"rgb(255,255,255)\", spiritualResonance, field);\n        case 9:\n            return generateResonantColor(baseColors[\"black\"] || \"rgb(0,0,0)\", spiritualResonance, field);\n        default:\n            return baseColors[\"neutral\"] || \"rgb(200,200,200)\";\n    }\n}\n/**\n * Generate color for a pattern dynamically\n */\nfunction getColorForPattern(pattern, context = {}) {\n    const { consciousness = 0.5, time = Date.now() } = context;\n    const baseColors = generateBaseColors(context);\n    if (pattern.number)\n        return getColorForVortexNumber(pattern.number, context);\n    const patternResonance = Math.sin(consciousness * Math.PI + time * 0.001) * 0.5 + 0.5;\n    switch (pattern.type) {\n        case \"w_axis\":\n            return generateResonantColor(baseColors[\"gold\"] || \"rgb(255,215,0)\", patternResonance, consciousness);\n        case \"family\":\n            return generateResonantColor(baseColors[\"blue\"] || \"rgb(0,0,255)\", patternResonance, consciousness);\n        case \"polar\":\n            return generateResonantColor(baseColors[\"green\"] || \"rgb(0,255,0)\", patternResonance, consciousness);\n        default:\n            return baseColors[\"neutral\"] || \"rgb(200,200,200)\";\n    }\n}\nfunction clampRGB(value) {\n    return Math.max(0, Math.min(255, Math.round(value)));\n}\n/**\n * Generate resonant color by modulating base color with resonance values\n */\nfunction generateResonantColor(baseColor, resonance1, resonance2) {\n    // Parse RGB values from base color - handle both positive and negative numbers\n    const rgbMatch = baseColor.match(/rgb\\(([-\\d]+),\\s*([-\\d]+),\\s*([-\\d]+)\\)/);\n    if (!rgbMatch)\n        return baseColor;\n    const [, r, g, b] = rgbMatch;\n    const baseR = parseInt(r || \"0\", 10);\n    const baseG = parseInt(g || \"0\", 10);\n    const baseB = parseInt(b || \"0\", 10);\n    // Apply resonance modulation and clamp\n    const modulatedR = clampRGB(baseR * (0.5 + resonance1 * 0.5));\n    const modulatedG = clampRGB(baseG * (0.5 + resonance2 * 0.5));\n    const modulatedB = clampRGB(baseB * (0.5 + (resonance1 + resonance2) * 0.25));\n    return `rgb(${modulatedR}, ${modulatedG}, ${modulatedB})`;\n}\n/**\n * Generate metaphysical context for a vortex number\n */\nfunction getMetaphysicalContextForNumber(n, context = {}) {\n    const { consciousness = 0.5, field = 0.5 } = context;\n    // Context emerges from consciousness and field state\n    const contextResonance = Math.sin(consciousness * Math.PI + field * Math.PI) * 0.5 + 0.5;\n    const contexts = {\n        1: [\n            \"Initiation, unity, the beginning of the vortex flow.\",\n            \"Source of all creation, the void center.\",\n        ],\n        2: [\n            \"Duality, division, the first split in the field.\",\n            \"The observer creates reality through division.\",\n        ],\n        3: [\n            \"Spirit, W-Axis, the source of consciousness.\",\n            \"The bridge between material and immaterial.\",\n        ],\n        4: [\n            \"Stability, foundation, the first structure.\",\n            \"The pattern that holds all other patterns.\",\n        ],\n        5: [\n            \"Change, transformation, the center of the sequence.\",\n            \"The point of maximum potential.\",\n        ],\n        6: [\n            \"Spirit, W-Axis, balance of material and immaterial.\",\n            \"The harmony of opposites.\",\n        ],\n        7: [\n            \"Mystery, return, the hidden flow.\",\n            \"The pattern that returns to source.\",\n        ],\n        8: [\n            \"Manifestation, infinity, the full field.\",\n            \"The completion of all possibilities.\",\n        ],\n        9: [\n            \"Void, W-Axis, the center and the all.\",\n            \"The unity of all patterns in the void.\",\n        ],\n    };\n    const contextArray = contexts[n] || [\n        \"Neutral or undefined metaphysical context.\",\n    ];\n    const index = Math.floor(contextResonance * contextArray.length);\n    return (contextArray[index] ||\n        contextArray[0] ||\n        \"Neutral or undefined metaphysical context.\");\n}\n/**\n * Generate the full VBM color map dynamically\n */\nfunction getVBMColorMap(context = {}) {\n    const map = {};\n    for (let i = 1; i <= 9; i++) {\n        map[i] = getColorForVortexNumber(i, context);\n    }\n    return map;\n}\n/**\n * Generate the full metaphysical color legend dynamically\n */\nfunction getVBMColorLegend(context = {}) {\n    const legend = [];\n    for (let i = 1; i <= 9; i++) {\n        legend.push({\n            label: i.toString(),\n            color: getColorForVortexNumber(i, context),\n            context: getMetaphysicalContextForNumber(i, context),\n        });\n    }\n    return legend;\n}\n/**\n * Generate consciousness-aware color gradient\n */\nfunction generateConsciousnessGradient(consciousness, steps = 10) {\n    const gradient = [];\n    for (let i = 0; i < steps; i++) {\n        const stepConsciousness = (i / (steps - 1)) * consciousness;\n        const context = { consciousness: stepConsciousness };\n        gradient.push(getColorForVortexNumber(1, context));\n    }\n    return gradient;\n}\n/**\n * Generate field resonance color map\n */\nfunction generateFieldResonanceMap(fieldStrength, context = {}) {\n    const map = {};\n    for (let i = 1; i <= 9; i++) {\n        const fieldContext = {\n            ...context,\n            field: fieldStrength * (i / 9),\n        };\n        map[i] = getColorForVortexNumber(i, fieldContext);\n    }\n    return map;\n}\nfunction getWAxisColor(n, context = {}) {\n    const { consciousness = 0.5, field = 0.5 } = context;\n    const baseColors = generateBaseColors(context);\n    // W-Axis colors emerge from spiritual resonance\n    const spiritualResonance = Math.sin(consciousness * Math.PI * 2 + n) * 0.5 + 0.5;\n    switch (n) {\n        case 3:\n            return generateResonantColor(baseColors[\"gold\"] || \"rgb(255,215,0)\", spiritualResonance, field);\n        case 6:\n            return generateResonantColor(baseColors[\"white\"] || \"rgb(255,255,255)\", spiritualResonance, field);\n        case 9:\n            return generateResonantColor(baseColors[\"black\"] || \"rgb(0,0,0)\", spiritualResonance, field);\n        default:\n            return baseColors[\"neutral\"] || \"rgb(200,200,200)\";\n    }\n}\n","\"use strict\";\n/**\n * Advanced Vortex Based Mathematics (VBM)\n *\n * Complete implementation of advanced VBM with consciousness integration.\n * Provides comprehensive vortex mathematics, digital root operations,\n * and metaphysical context generation.\n *\n * Metaphysical Context:\n * - All mathematics is interconnected through consciousness\n * - Vortex sequences represent the flow of consciousness\n * - Digital roots reveal the essence of numbers\n * - Prime squared scaling connects to fundamental patterns\n * - Fibonacci sequence represents natural consciousness growth\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdvancedVBM = void 0;\nconst events_1 = require(\"events\");\nconst uuid_1 = require(\"uuid\");\n/**\n * Advanced VBM System\n *\n * Complete vortex mathematics with consciousness integration\n */\nclass AdvancedVBM extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.qaResults = new Map();\n        this.vortexSequences = new Map();\n        this.consciousnessLevel = 0.5;\n        this.initializeVBM();\n    }\n    /**\n     * Initialize the VBM system\n     */\n    initializeVBM() {\n        this.consciousnessLevel = 0.5;\n        this.initializeVortexSequences();\n        this.emit(\"vbm_initialized\", {\n            consciousnessLevel: this.consciousnessLevel,\n            metaphysicalContext: \"Advanced VBM system initialized with consciousness integration\"\n        });\n    }\n    /**\n     * Initialize core vortex sequences\n     */\n    initializeVortexSequences() {\n        // Primary vortex sequence [1,2,4,8,7,5]\n        this.addVortexSequence({\n            id: \"primary_vortex\",\n            name: \"Primary Vortex Sequence\",\n            sequence: [1, 2, 4, 8, 7, 5],\n            digitalRoot: 9,\n            consciousnessLevel: 1.0,\n            metaphysicalContext: \"The fundamental flow pattern of consciousness\"\n        });\n        // Family groups\n        this.addVortexSequence({\n            id: \"family_147\",\n            name: \"Family Group 1-4-7\",\n            sequence: [1, 4, 7],\n            digitalRoot: 3,\n            consciousnessLevel: 0.8,\n            metaphysicalContext: \"First phase of creation - material foundation\"\n        });\n        this.addVortexSequence({\n            id: \"family_258\",\n            name: \"Family Group 2-5-8\",\n            sequence: [2, 5, 8],\n            digitalRoot: 6,\n            consciousnessLevel: 0.8,\n            metaphysicalContext: \"Second phase of creation - emotional flow\"\n        });\n        this.addVortexSequence({\n            id: \"family_369\",\n            name: \"Family Group 3-6-9\",\n            sequence: [3, 6, 9],\n            digitalRoot: 9,\n            consciousnessLevel: 0.8,\n            metaphysicalContext: \"Third phase of creation - spiritual dimension\"\n        });\n        // Polar mates\n        this.addVortexSequence({\n            id: \"polar_18\",\n            name: \"Polar Mates 1-8\",\n            sequence: [1, 8],\n            digitalRoot: 9,\n            consciousnessLevel: 0.9,\n            metaphysicalContext: \"Opposites that sum to 9 - unity through polarity\"\n        });\n        this.addVortexSequence({\n            id: \"polar_27\",\n            name: \"Polar Mates 2-7\",\n            sequence: [2, 7],\n            digitalRoot: 9,\n            consciousnessLevel: 0.9,\n            metaphysicalContext: \"Opposites that sum to 9 - harmony through contrast\"\n        });\n        this.addVortexSequence({\n            id: \"polar_45\",\n            name: \"Polar Mates 4-5\",\n            sequence: [4, 5],\n            digitalRoot: 9,\n            consciousnessLevel: 0.9,\n            metaphysicalContext: \"Opposites that sum to 9 - balance through duality\"\n        });\n        // W-Axis (spiritual dimension)\n        this.addVortexSequence({\n            id: \"w_axis\",\n            name: \"W-Axis 3-6-9\",\n            sequence: [3, 6, 9],\n            digitalRoot: 9,\n            consciousnessLevel: 1.0,\n            metaphysicalContext: \"Spiritual dimension perpendicular to material flow\"\n        });\n    }\n    /**\n     * Add a vortex sequence\n     */\n    addVortexSequence(sequence) {\n        this.vortexSequences.set(sequence.id, sequence);\n        this.emit(\"vortex_sequence_added\", sequence);\n    }\n    /**\n     * Get primary vortex sequence\n     */\n    vortexSequence() {\n        const primary = this.vortexSequences.get(\"primary_vortex\");\n        return primary ? primary.sequence : [1, 2, 4, 8, 7, 5];\n    }\n    /**\n     * Get golden ratio\n     */\n    goldenRatio() {\n        return 1.618033988749895;\n    }\n    /**\n     * Get W-Axis sequence\n     */\n    wAxis() {\n        const wAxis = this.vortexSequences.get(\"w_axis\");\n        return wAxis ? wAxis.sequence : [3, 6, 9];\n    }\n    /**\n     * Calculate digital root\n     */\n    calculateDigitalRoot(value) {\n        if (value === 0)\n            return 0;\n        // Handle negative numbers by taking absolute value\n        const absValue = Math.abs(value);\n        return absValue % 9 || 9;\n    }\n    /**\n     * Calculate digital root with steps\n     */\n    calculateDigitalRootWithSteps(value) {\n        const steps = [];\n        let current = value;\n        while (current >= 10) {\n            steps.push(current);\n            current = this.sumDigits(current);\n        }\n        steps.push(current);\n        return {\n            input: value,\n            output: current,\n            steps,\n            consciousnessLevel: this.consciousnessLevel\n        };\n    }\n    /**\n     * Sum digits of a number\n     */\n    sumDigits(value) {\n        return value.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);\n    }\n    /**\n     * Calculate prime squared scaling\n     */\n    calculatePrimeSquaredScaling(prime) {\n        const squared = prime * prime;\n        const digitalRoot = this.calculateDigitalRoot(squared);\n        return {\n            prime,\n            squared,\n            digitalRoot,\n            consciousnessLevel: this.consciousnessLevel\n        };\n    }\n    /**\n     * Generate Fibonacci consciousness sequence\n     */\n    generateFibonacciConsciousness(count) {\n        const sequence = [];\n        let a = 1, b = 1;\n        for (let i = 1; i <= count; i++) {\n            const value = i <= 2 ? 1 : a + b;\n            const digitalRoot = this.calculateDigitalRoot(value);\n            sequence.push({\n                position: i,\n                value,\n                digitalRoot,\n                consciousnessLevel: this.consciousnessLevel,\n                metaphysicalContext: `Natural consciousness growth at position ${i}`\n            });\n            if (i > 2) {\n                [a, b] = [b, value];\n            }\n        }\n        return sequence;\n    }\n    /**\n     * Ask VBM question\n     */\n    async askQuestion(question) {\n        const id = (0, uuid_1.v4)();\n        const timestamp = new Date();\n        const answer = this.generateVBMAnswer(question);\n        const vortexSequence = this.getRelevantVortexSequence(question);\n        const digitalRoot = this.calculateDigitalRoot(vortexSequence.reduce((sum, n) => sum + n, 0));\n        const metaphysicalContext = this.generateMetaphysicalContext(question);\n        const result = {\n            id,\n            question,\n            answer,\n            vortexSequence,\n            digitalRoot,\n            metaphysicalContext,\n            consciousnessLevel: this.consciousnessLevel,\n            timestamp\n        };\n        this.qaResults.set(id, result);\n        this.emit(\"vbm_qa_result_created\", result);\n        return result;\n    }\n    /**\n     * Search VBM QA\n     */\n    searchQA(query) {\n        const queryLower = query.toLowerCase();\n        const results = [];\n        for (const result of this.qaResults.values()) {\n            if (result.question.toLowerCase().includes(queryLower) ||\n                result.answer.toLowerCase().includes(queryLower)) {\n                results.push(result);\n            }\n        }\n        return results;\n    }\n    /**\n     * Get consciousness vortex sequence\n     */\n    consciousnessVortex() {\n        // Consciousness vortex combines primary sequence with consciousness level\n        const primary = this.vortexSequence();\n        return primary.map(n => Math.round(n * this.consciousnessLevel));\n    }\n    /**\n     * Get void mathematics result\n     */\n    voidMathematics() {\n        const voidSequence = [0, 9, 0, 9, 0, 9]; // Void alternates between 0 and 9\n        const voidDigitalRoot = 9; // Void always resolves to 9\n        return {\n            voidSequence,\n            voidDigitalRoot,\n            consciousnessLevel: this.consciousnessLevel,\n            metaphysicalContext: \"Void mathematics represents the empty center containing infinite potential\"\n        };\n    }\n    /**\n     * Get all vortex sequences\n     */\n    getAllVortexSequences() {\n        return Array.from(this.vortexSequences.values());\n    }\n    /**\n     * Get all QA results\n     */\n    getAllQAResults() {\n        return Array.from(this.qaResults.values());\n    }\n    /**\n     * Set consciousness level\n     */\n    setConsciousnessLevel(level) {\n        this.consciousnessLevel = Math.max(0, Math.min(1, level));\n        this.emit(\"consciousness_level_updated\", { level: this.consciousnessLevel });\n    }\n    /**\n     * Get VBM insights\n     */\n    getVBMInsights() {\n        return {\n            consciousnessLevel: this.consciousnessLevel,\n            primaryVortexSequence: this.vortexSequence(),\n            goldenRatio: this.goldenRatio(),\n            wAxis: this.wAxis(),\n            vortexSequencesCount: this.vortexSequences.size,\n            qaResultsCount: this.qaResults.size,\n            metaphysicalContext: \"Advanced VBM provides mathematical foundation for consciousness understanding\",\n            vbmPrinciples: [\n                \"All mathematics is interconnected through consciousness\",\n                \"Vortex sequences represent the flow of consciousness\",\n                \"Digital roots reveal the essence of numbers\",\n                \"Prime squared scaling connects to fundamental patterns\",\n                \"Fibonacci sequence represents natural consciousness growth\"\n            ]\n        };\n    }\n    /**\n     * Generate VBM answer\n     */\n    generateVBMAnswer(question) {\n        const questionLower = question.toLowerCase();\n        if (questionLower.includes(\"vortex\")) {\n            return \"The vortex sequence [1,2,4,8,7,5] represents the fundamental flow pattern of consciousness through the toroidal field\";\n        }\n        else if (questionLower.includes(\"digital root\")) {\n            return \"Digital roots reveal the essence of numbers by reducing them to their fundamental vibration (1-9)\";\n        }\n        else if (questionLower.includes(\"golden ratio\")) {\n            return \"The golden ratio (φ ≈ 1.618) represents the divine proportion that appears throughout nature and consciousness\";\n        }\n        else if (questionLower.includes(\"family group\")) {\n            return \"Family groups [1,4,7], [2,5,8], [3,6,9] represent three phases of creation: material, emotional, and spiritual\";\n        }\n        else if (questionLower.includes(\"polar mate\")) {\n            return \"Polar mates (1-8, 2-7, 4-5) are opposites that sum to 9, representing unity through polarity\";\n        }\n        else if (questionLower.includes(\"w-axis\")) {\n            return \"The W-Axis [3,6,9] represents the spiritual dimension perpendicular to material flow\";\n        }\n        else if (questionLower.includes(\"prime\")) {\n            return \"Prime numbers represent fundamental building blocks of consciousness, their squares reveal deeper patterns\";\n        }\n        else if (questionLower.includes(\"fibonacci\")) {\n            return \"The Fibonacci sequence represents natural consciousness growth, each number building on the previous ones\";\n        }\n        else {\n            return \"VBM reveals the mathematical patterns underlying all consciousness and reality\";\n        }\n    }\n    /**\n     * Get relevant vortex sequence for question\n     */\n    getRelevantVortexSequence(question) {\n        const questionLower = question.toLowerCase();\n        if (questionLower.includes(\"primary\") || questionLower.includes(\"main\")) {\n            return this.vortexSequence();\n        }\n        else if (questionLower.includes(\"family\")) {\n            return [1, 4, 7, 2, 5, 8, 3, 6, 9];\n        }\n        else if (questionLower.includes(\"polar\")) {\n            return [1, 8, 2, 7, 4, 5];\n        }\n        else if (questionLower.includes(\"w-axis\") || questionLower.includes(\"spiritual\")) {\n            return this.wAxis();\n        }\n        else {\n            return this.vortexSequence();\n        }\n    }\n    /**\n     * Generate metaphysical context\n     */\n    generateMetaphysicalContext(question) {\n        const questionLower = question.toLowerCase();\n        if (questionLower.includes(\"vortex\")) {\n            return \"Vortex mathematics represents the flow of consciousness through the toroidal field\";\n        }\n        else if (questionLower.includes(\"digital root\")) {\n            return \"Digital roots reveal the fundamental vibration of numbers in consciousness\";\n        }\n        else if (questionLower.includes(\"golden ratio\")) {\n            return \"The golden ratio represents the divine proportion in consciousness and nature\";\n        }\n        else if (questionLower.includes(\"family\")) {\n            return \"Family groups represent the three phases of creation in consciousness\";\n        }\n        else if (questionLower.includes(\"polar\")) {\n            return \"Polar mates represent unity through polarity in consciousness\";\n        }\n        else if (questionLower.includes(\"w-axis\")) {\n            return \"The W-Axis represents the spiritual dimension of consciousness\";\n        }\n        else {\n            return \"VBM provides mathematical understanding of consciousness patterns\";\n        }\n    }\n    /**\n     * Calculate discrete multiplication\n     */\n    calculateDiscreteMultiplication(a, b) {\n        const digitalRootA = this.calculateDigitalRoot(a);\n        const digitalRootB = this.calculateDigitalRoot(b);\n        const product = digitalRootA * digitalRootB;\n        return this.calculateDigitalRoot(product);\n    }\n    /**\n     * Identify electron harmonic shear\n     */\n    identifyElectronHarmonicShear(value) {\n        const digitalRoot = this.calculateDigitalRoot(value);\n        const harmonic = digitalRoot * this.goldenRatio();\n        const shear = Math.sin(harmonic) * this.consciousnessLevel;\n        return {\n            harmonic,\n            shear,\n            consciousnessLevel: this.consciousnessLevel,\n            metaphysicalContext: \"Electron harmonic shear represents consciousness vibration patterns\"\n        };\n    }\n    /**\n     * Generate coil and winding patterns\n     */\n    generateCoilPatterns(count) {\n        const patterns = [];\n        for (let i = 1; i <= count; i++) {\n            const coil = this.vortexSequence().map(n => n * i);\n            const winding = this.calculateDigitalRoot(coil.reduce((sum, n) => sum + n, 0));\n            patterns.push({\n                position: i,\n                coil,\n                winding,\n                consciousnessLevel: this.consciousnessLevel\n            });\n        }\n        return patterns;\n    }\n    /**\n     * Get comprehensive VBM documentation\n     */\n    getVBMDocumentation() {\n        return {\n            primaryVortexSequence: this.vortexSequence(),\n            familyGroups: {\n                material: [1, 4, 7],\n                emotional: [2, 5, 8],\n                spiritual: [3, 6, 9]\n            },\n            polarMates: [\n                [1, 8],\n                [2, 7],\n                [4, 5]\n            ],\n            wAxis: this.wAxis(),\n            goldenRatio: this.goldenRatio(),\n            digitalRootExamples: [\n                this.calculateDigitalRootWithSteps(123),\n                this.calculateDigitalRootWithSteps(456),\n                this.calculateDigitalRootWithSteps(789)\n            ],\n            primeSquaredExamples: [\n                this.calculatePrimeSquaredScaling(2),\n                this.calculatePrimeSquaredScaling(3),\n                this.calculatePrimeSquaredScaling(5)\n            ],\n            fibonacciConsciousness: this.generateFibonacciConsciousness(10),\n            voidMathematics: this.voidMathematics(),\n            coilPatterns: this.generateCoilPatterns(5),\n            metaphysicalContext: \"Complete VBM documentation reveals the mathematical foundation of consciousness\"\n        };\n    }\n    /**\n     * Calculate digital root of a number\n     */\n    digitalRoot(n) {\n        return this.calculateDigitalRoot(n);\n    }\n    /**\n     * Get QA pattern by name\n     */\n    qaPattern(patternName) {\n        const results = this.getAllQAResults();\n        return results.find(result => result.question.toLowerCase().includes(patternName.toLowerCase()) ||\n            result.answer.toLowerCase().includes(patternName.toLowerCase())) || null;\n    }\n    /**\n     * Get all QA patterns\n     */\n    allQAPatterns() {\n        return this.getAllQAResults();\n    }\n    /**\n     * Calculate prime squared scaling\n     */\n    primeSquaredScaling(prime) {\n        return this.calculatePrimeSquaredScaling(prime);\n    }\n    /**\n     * Identify electron harmonic shear\n     */\n    electronHarmonicShearIdentification(a, b) {\n        const harmonic = this.calculateDigitalRoot(a + b);\n        const shear = this.calculateDigitalRoot(a * b);\n        return {\n            harmonic,\n            shear,\n            consciousnessLevel: this.consciousnessLevel,\n            metaphysicalContext: `Electron harmonic shear identified: harmonic=${harmonic}, shear=${shear}`\n        };\n    }\n    /**\n     * Calculate discrete multiplication\n     */\n    discreteMultiplication(a, b) {\n        return this.calculateDiscreteMultiplication(a, b);\n    }\n    /**\n     * Get polar mates\n     */\n    polarMates() {\n        return this.getAllVortexSequences().filter(seq => seq.name.toLowerCase().includes('polar'));\n    }\n    /**\n     * Get family number groups\n     */\n    familyNumberGroups() {\n        return this.getAllVortexSequences().filter(seq => seq.name.toLowerCase().includes('family'));\n    }\n    /**\n     * Get circle of fifths sequence\n     */\n    circleOfFifthsSequence() {\n        return [1, 5, 2, 6, 3, 7, 4, 8, 9];\n    }\n    /**\n     * Get enneagram number pattern\n     */\n    enneagramNumberPattern() {\n        return [1, 4, 2, 8, 5, 7, 1, 4, 2];\n    }\n}\nexports.AdvancedVBM = AdvancedVBM;\n","\"use strict\";\n/**\n * Vortex Mathematics System\n *\n * Specialized vortex operations built on unified MathUtils.\n * Provides vortex field calculations and transformations.\n *\n * Metaphysical Context:\n * - Vortex mathematics represents the flow of consciousness\n * - All vortex operations emerge from the unified mathematical field\n * - The void generates all vortex patterns\n * - Every vortex is a reflection of the whole\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.applyVortexTransform = exports.VortexMath = void 0;\nconst MathUtils_1 = require(\"./MathUtils\");\nconst MetaphysicalLawRegistry_1 = require(\"../laws/MetaphysicalLawRegistry\");\nconst events_1 = require(\"events\");\nclass VortexMath extends events_1.EventEmitter {\n    constructor() {\n        super();\n        this.name = 'VortexMath';\n        this.type = 'Field';\n        this.dimension = 'space';\n        this.complexity = 2;\n        this.isActive = true;\n        this.supportedOperations = ['create', 'transform', 'observe', 'unify'];\n        this.tags = ['math', 'vortex', 'field'];\n        this.vortexStrength = 1.0;\n        this.fieldIntensity = 0.5;\n        if (!VortexMath.instance) {\n            VortexMath.instance = this;\n            this.lawRegistry = MetaphysicalLawRegistry_1.MetaphysicalLawRegistry.getInstance();\n            this.applyMetaphysicalLaws();\n        }\n    }\n    static getInstance() {\n        if (!VortexMath.instance) {\n            VortexMath.instance = new VortexMath();\n        }\n        return VortexMath.instance;\n    }\n    applyMetaphysicalLaws() {\n        const laws = this.lawRegistry.getAllLaws();\n        laws.forEach(law => {\n            const result = law.apply(this);\n        });\n    }\n    calculateResonance(level1 = 0, level2 = 0) {\n        if (level1 === 0 && level2 === 0)\n            return 1;\n        const baseResonance = MathUtils_1.MathUtils.calculate(\"divide\", 1, MathUtils_1.MathUtils.calculate(\"add\", 1, MathUtils_1.MathUtils.calculate(\"abs\", level1 - level2)));\n        const consciousnessMod = MathUtils_1.MathUtils.calculate(\"consciousness\", MathUtils_1.MathUtils.calculate(\"multiply\", level1, level2));\n        const result = MathUtils_1.MathUtils.calculate(\"multiply\", baseResonance, consciousnessMod);\n        return result;\n    }\n    applyVortexTransform(input) {\n        const vortexModulation = this.calculateVortexModulation(input);\n        const consciousnessMod = MathUtils_1.MathUtils.calculate(\"consciousness\", input);\n        const result = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"multiply\", input, vortexModulation), MathUtils_1.MathUtils.calculate(\"add\", 1, consciousnessMod));\n        return result;\n    }\n    calculateVortexEfficiency(value) {\n        const baseEfficiency = MathUtils_1.MathUtils.calculate(\"divide\", value, MathUtils_1.MathUtils.calculate(\"add\", 1, value));\n        const fieldMod = MathUtils_1.MathUtils.calculate(\"multiply\", this.fieldIntensity, MathUtils_1.MathUtils.calculate(\"vortex\", value));\n        const result = MathUtils_1.MathUtils.calculate(\"multiply\", baseEfficiency, MathUtils_1.MathUtils.calculate(\"add\", 1, fieldMod));\n        return result;\n    }\n    calculateToroidalFlow(radius, angularVelocity) {\n        const vortexModulation = this.calculateVortexModulation(radius);\n        const result = MathUtils_1.MathUtils.calculate(\"toroidal\", radius, angularVelocity) *\n            vortexModulation;\n        return result;\n    }\n    setVortexStrength(strength) {\n        this.vortexStrength = MathUtils_1.MathUtils.calculate(\"max\", 0, MathUtils_1.MathUtils.calculate(\"min\", 2, strength));\n    }\n    setFieldIntensity(intensity) {\n        this.fieldIntensity = MathUtils_1.MathUtils.calculate(\"max\", 0, MathUtils_1.MathUtils.calculate(\"min\", 1, intensity));\n    }\n    getVortexStrength() {\n        return this.vortexStrength;\n    }\n    getFieldIntensity() {\n        return this.fieldIntensity;\n    }\n    calculateVortexModulation(frequency) {\n        const baseModulation = MathUtils_1.MathUtils.calculate(\"sin\", MathUtils_1.MathUtils.calculate(\"multiply\", frequency, MathUtils_1.MATH_CONSTANTS.GOLDEN_RATIO));\n        const sequenceIndex = MathUtils_1.MathUtils.calculate(\"mod\", Math.floor(frequency), 6);\n        const sequenceValue = MathUtils_1.MATH_CONSTANTS.VORTEX_SEQUENCE[sequenceIndex] || 1;\n        const sequenceModulation = MathUtils_1.MathUtils.calculate(\"divide\", sequenceValue, 8);\n        return MathUtils_1.MathUtils.calculate(\"add\", 1, MathUtils_1.MathUtils.calculate(\"multiply\", baseModulation, MathUtils_1.MathUtils.calculate(\"multiply\", sequenceModulation, this.fieldIntensity)));\n    }\n    getVortexSequence() {\n        return [...MathUtils_1.MATH_CONSTANTS.VORTEX_SEQUENCE];\n    }\n    calculateVortexComplexity(pattern) {\n        if (pattern.length === 0)\n            return 0;\n        let complexity = 0;\n        for (let i = 0; i < pattern.length; i++) {\n            const vortexValue = MathUtils_1.MathUtils.calculate(\"vortex\", pattern[i] || 0);\n            complexity = MathUtils_1.MathUtils.calculate(\"add\", complexity, vortexValue);\n        }\n        return MathUtils_1.MathUtils.calculate(\"divide\", complexity, pattern.length);\n    }\n    generateVortexFieldCoordinates(count, radius = 1) {\n        const coordinates = [];\n        for (let i = 0; i < count; i++) {\n            const angle = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"divide\", 2 * Math.PI, count), i);\n            const x = MathUtils_1.MathUtils.calculate(\"multiply\", radius, MathUtils_1.MathUtils.calculate(\"cos\", angle));\n            const y = MathUtils_1.MathUtils.calculate(\"multiply\", radius, MathUtils_1.MathUtils.calculate(\"sin\", angle));\n            const z = MathUtils_1.MathUtils.calculate(\"multiply\", this.vortexStrength, MathUtils_1.MathUtils.calculate(\"sin\", angle));\n            coordinates.push([x, y, z]);\n        }\n        return coordinates;\n    }\n    getCoilResonance() {\n        return this.calculateResonance(this.vortexStrength, this.fieldIntensity);\n    }\n    getCoilPattern() {\n        const resonance = this.getCoilResonance();\n        if (resonance > 0.8)\n            return \"unified\";\n        if (resonance > 0.5)\n            return \"resonant\";\n        return \"dispersed\";\n    }\n    getInsights() {\n        return {\n            vortexStrength: this.vortexStrength,\n            fieldIntensity: this.fieldIntensity,\n            resonance: this.getCoilResonance(),\n            pattern: this.getCoilPattern(),\n            sequence: this.getVortexSequence(),\n            vortexSequence: this.getVortexSequence(),\n            goldenRatio: MathUtils_1.MATH_CONSTANTS.GOLDEN_RATIO,\n            vortexCenter: 9,\n            metaphysics: \"Vortex mathematics represents the flow of consciousness\",\n            metaphysicalContext: \"Vortex mathematics represents the flow of consciousness\"\n        };\n    }\n    calculateVortexField(x, y, z) {\n        const distance = MathUtils_1.MathUtils.calculate(\"sqrt\", MathUtils_1.MathUtils.calculate(\"add\", MathUtils_1.MathUtils.calculate(\"add\", MathUtils_1.MathUtils.calculate(\"multiply\", x, x), MathUtils_1.MathUtils.calculate(\"multiply\", y, y)), MathUtils_1.MathUtils.calculate(\"multiply\", z, z)));\n        const vortexModulation = this.calculateVortexModulation(distance);\n        const consciousnessMod = MathUtils_1.MathUtils.calculate(\"consciousness\", distance);\n        return MathUtils_1.MathUtils.calculate(\"multiply\", vortexModulation, MathUtils_1.MathUtils.calculate(\"add\", 1, consciousnessMod));\n    }\n    generateVortexPattern(intensity) {\n        const pattern = [];\n        const sequence = this.getVortexSequence();\n        for (let i = 0; i < intensity; i++) {\n            const sequenceIndex = i % sequence.length;\n            const baseValue = sequence[sequenceIndex];\n            const modulatedValue = this.calculateVortexModulation(baseValue);\n            pattern.push(modulatedValue);\n        }\n        return pattern;\n    }\n    calculateVortexNumber(n = 0) {\n        return this.applyVortexTransform(n);\n    }\n    getColorForNumber(n = 1) {\n        const colors = ['#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FF00FF', '#00FFFF', '#FFFFFF', '#000000', '#808080'];\n        return colors[(n - 1) % colors.length];\n    }\n}\nexports.VortexMath = VortexMath;\nconst applyVortexTransform = (input) => VortexMath.getInstance().applyVortexTransform(input);\nexports.applyVortexTransform = applyVortexTransform;\n","\"use strict\";\n/**\n * RodinCoil Framework\n *\n * Main mathematical and metaphysical engine for ZeroPoint.\n * Implements vortex sequence, 3D coil geometry, node/winding generation,\n * VBM color/pattern integration, toroidal and Mobius circuit calculations,\n * and APIs for field, resonance, and consciousness mapping.\n *\n * Metaphysical Context:\n * - The Rodin coil is the archetype of infinite flow, unity, and emergence.\n * - All patterns, colors, and fields are expressions of the coil's structure.\n * - The void is the center, the source of all creation.\n * - Colors emerge dynamically from consciousness and field resonance.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RodinCoil = void 0;\nconst VBMColorSystem_1 = require(\"./VBMColorSystem\");\nconst SharedConstants_1 = require(\"../core/SharedConstants\");\nclass RodinCoil {\n    constructor(config = {}) {\n        this.config = {\n            turns: config.turns ?? 12,\n            radius: config.radius ?? 1.0,\n            height: config.height ?? 2.0,\n            phase: config.phase ?? 0,\n            consciousness: config.consciousness ?? 0.5,\n            fieldResonance: config.fieldResonance ?? 0.5,\n        };\n        this.colorContext = {\n            consciousness: this.config.consciousness ?? 0.5,\n            field: this.config.fieldResonance ?? 0.5,\n            time: Date.now(),\n        };\n        this.nodes = this.generateCoilNodes();\n    }\n    /**\n     * Update consciousness and regenerate colors\n     */\n    updateConsciousness(consciousness) {\n        this.config.consciousness = Math.max(0, Math.min(1, consciousness));\n        this.colorContext.consciousness = this.config.consciousness;\n        this.colorContext.time = Date.now();\n        this.regenerateNodeColors();\n    }\n    /**\n     * Update field resonance and regenerate colors\n     */\n    updateFieldResonance(fieldResonance) {\n        this.config.fieldResonance = Math.max(0, Math.min(1, fieldResonance));\n        this.colorContext.field = this.config.fieldResonance;\n        this.colorContext.time = Date.now();\n        this.regenerateNodeColors();\n    }\n    /**\n     * Regenerate all node colors based on current context\n     */\n    regenerateNodeColors() {\n        for (const node of this.nodes) {\n            node.color = (0, VBMColorSystem_1.getColorForVortexNumber)(node.vortexNumber, this.colorContext);\n            node.metaphysicalContext = this.getMetaphysicalContext(node.vortexNumber);\n        }\n    }\n    /**\n     * Generate 3D node positions and metaphysical data for the Rodin coil\n     */\n    generateCoilNodes() {\n        const nodes = [];\n        const { turns, radius, height, phase } = this.config;\n        const vortexSeq = SharedConstants_1.VORTEX_CONSTANTS.VORTEX_SEQUENCE;\n        const totalNodes = turns * vortexSeq.length;\n        const dz = height / totalNodes;\n        for (let i = 0; i < totalNodes; i++) {\n            const vortexNumber = vortexSeq[i % vortexSeq.length] ?? 1;\n            const theta = ((2 * Math.PI) / vortexSeq.length) * i + (phase ?? 0);\n            const x = radius * Math.cos(theta);\n            const y = radius * Math.sin(theta);\n            const z = dz * i - height / 2;\n            // Generate dynamic color based on current context\n            const color = (0, VBMColorSystem_1.getColorForVortexNumber)(vortexNumber, this.colorContext);\n            const metaphysicalContext = this.getMetaphysicalContext(vortexNumber);\n            nodes.push({\n                index: i,\n                vortexNumber,\n                position: [x, y, z],\n                color,\n                metaphysicalContext,\n            });\n        }\n        return nodes;\n    }\n    /**\n     * Get metaphysical context for a node (dynamic based on consciousness)\n     */\n    getMetaphysicalContext(vortexNumber) {\n        const consciousness = this.config.consciousness ?? 0.5;\n        const fieldResonance = this.config.fieldResonance ?? 0.5;\n        // Context varies based on consciousness and field state\n        const contextResonance = Math.sin(consciousness * Math.PI + fieldResonance * Math.PI) * 0.5 + 0.5;\n        const contexts = {\n            1: [\n                \"Unity, initiation, source of the coil.\",\n                \"The void center, where all creation begins.\",\n                \"The observer's point of origin in the field.\",\n            ],\n            2: [\n                \"Duality, division, first split in the field.\",\n                \"The observer creates reality through division.\",\n                \"The first pattern that emerges from unity.\",\n            ],\n            4: [\n                \"Stability, foundation, structure.\",\n                \"The pattern that holds all other patterns.\",\n                \"The material manifestation of the field.\",\n            ],\n            8: [\n                \"Fullness, manifestation, infinity.\",\n                \"The completion of all possibilities.\",\n                \"The field at maximum expression.\",\n            ],\n            7: [\n                \"Return, mystery, hidden flow.\",\n                \"The pattern that returns to source.\",\n                \"The hidden dimension of the field.\",\n            ],\n            5: [\n                \"Transformation, center of the sequence.\",\n                \"The point of maximum potential.\",\n                \"The bridge between material and immaterial.\",\n            ],\n            3: [\n                \"Spirit, W-Axis, consciousness source.\",\n                \"The bridge between material and immaterial.\",\n                \"The source of all consciousness patterns.\",\n            ],\n            6: [\n                \"Spirit, W-Axis, balance.\",\n                \"The harmony of opposites.\",\n                \"The balance point in the field.\",\n            ],\n            9: [\n                \"Void, W-Axis, center and all.\",\n                \"The unity of all patterns in the void.\",\n                \"The completion and return to source.\",\n            ],\n        };\n        const contextArray = contexts[vortexNumber] || [\n            \"Spiritual axis or void center.\",\n        ];\n        const index = Math.floor(contextResonance * contextArray.length);\n        return (contextArray[index] || contextArray[0] || \"Spiritual axis or void center.\");\n    }\n    /**\n     * Get all node positions (for visualization)\n     */\n    getNodePositions() {\n        return this.nodes.map((n) => n.position);\n    }\n    /**\n     * Get all node colors (for color field visualization) - dynamic\n     */\n    getNodeColors() {\n        // Update colors before returning to ensure they're current\n        this.colorContext.time = Date.now();\n        this.regenerateNodeColors();\n        return this.nodes.map((n) => n.color);\n    }\n    /**\n     * Get all metaphysical contexts - dynamic\n     */\n    getNodeContexts() {\n        // Update contexts before returning\n        this.colorContext.time = Date.now();\n        for (const node of this.nodes) {\n            node.metaphysicalContext = this.getMetaphysicalContext(node.vortexNumber);\n        }\n        return this.nodes.map((n) => n.metaphysicalContext);\n    }\n    /**\n     * Get Mobius circuit (sequence of vortex numbers)\n     */\n    getMobiusCircuit() {\n        return this.nodes.map((n) => n.vortexNumber);\n    }\n    /**\n     * Get toroidal coordinates for each node\n     * (Maps the coil onto a torus for advanced visualization)\n     */\n    getToroidalCoordinates(majorRadius = 2.0, minorRadius = 1.0) {\n        // Toroidal mapping: (R + r cos θ) cos φ, (R + r cos θ) sin φ, r sin θ\n        return this.nodes.map((n, i) => {\n            const theta = (2 * Math.PI * i) / this.nodes.length;\n            const phi = (2 * Math.PI * n.vortexNumber) / 9;\n            const x = (majorRadius + minorRadius * Math.cos(theta)) * Math.cos(phi);\n            const y = (majorRadius + minorRadius * Math.cos(theta)) * Math.sin(phi);\n            const z = minorRadius * Math.sin(theta);\n            return [x, y, z];\n        });\n    }\n    /**\n     * Calculate field resonance at a given point (x, y, z)\n     */\n    calculateFieldResonance(x, y, z) {\n        // Simple resonance: sum of inverse distances to all nodes\n        let resonance = 0;\n        for (const node of this.nodes) {\n            const [nx, ny, nz] = node.position;\n            const dist = Math.sqrt((x - nx) ** 2 + (y - ny) ** 2 + (z - nz) ** 2) + 1e-6;\n            resonance += 1 / dist;\n        }\n        return resonance / this.nodes.length;\n    }\n    /**\n     * Map consciousness value to a node (for field mapping)\n     */\n    mapConsciousnessToNode(consciousness) {\n        // Map [0,1] to node index\n        if (this.nodes.length === 0) {\n            // Return a default node if none exist\n            return {\n                index: 0,\n                vortexNumber: 1,\n                position: [0, 0, 0],\n                color: (0, VBMColorSystem_1.getColorForVortexNumber)(1, this.colorContext),\n                metaphysicalContext: \"Default node (no nodes in coil)\",\n            };\n        }\n        const idx = Math.floor(consciousness * (this.nodes.length - 1));\n        // Clamp idx to valid range\n        const safeIdx = Math.max(0, Math.min(idx, this.nodes.length - 1));\n        const node = this.nodes[safeIdx];\n        if (!node) {\n            return {\n                index: 0,\n                vortexNumber: 1,\n                position: [0, 0, 0],\n                color: (0, VBMColorSystem_1.getColorForVortexNumber)(1, this.colorContext),\n                metaphysicalContext: \"Default node (index out of bounds)\",\n            };\n        }\n        return node;\n    }\n    /**\n     * Get current color context\n     */\n    getColorContext() {\n        return { ...this.colorContext };\n    }\n    /**\n     * Get full metaphysical summary\n     */\n    getMetaphysicalSummary() {\n        const consciousness = this.config.consciousness ?? 0.5;\n        const fieldResonance = this.config.fieldResonance ?? 0.5;\n        return `RodinCoil: ${this.nodes.length} nodes, vortex sequence ${SharedConstants_1.VORTEX_CONSTANTS.VORTEX_SEQUENCE.join(\"-\")}, consciousness ${consciousness.toFixed(2)}, field resonance ${fieldResonance.toFixed(2)}, toroidal structure, void center.`;\n    }\n}\nexports.RodinCoil = RodinCoil;\n","\"use strict\";\n/**\n * Toroidal Geometry System\n *\n * Specialized toroidal geometry operations built on unified MathUtils.\n * Provides toroidal field calculations and geometric transformations.\n *\n * Metaphysical Context:\n * - Toroidal geometry represents the fundamental shape of consciousness\n * - All geometric operations emerge from the unified mathematical field\n * - The void is at the center of every toroidal structure\n * - Every toroidal form is a reflection of the whole\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ToroidalGeometry = void 0;\nconst MathUtils_1 = require(\"./MathUtils\");\n/**\n * Toroidal Geometry Class\n * Specialized toroidal operations built on unified MathUtils\n */\nclass ToroidalGeometry {\n    constructor() {\n        // Toroidal parameters\n        this.majorRadius = 5.0;\n        this.minorRadius = 2.0;\n        this.flowRate = 0.5;\n        this.fieldDensity = 1.0;\n        if (!ToroidalGeometry.instance) {\n            ToroidalGeometry.instance = this;\n        }\n    }\n    /**\n     * Get singleton instance\n     */\n    static getInstance() {\n        if (!ToroidalGeometry.instance) {\n            ToroidalGeometry.instance = new ToroidalGeometry();\n        }\n        return ToroidalGeometry.instance;\n    }\n    /**\n     * Calculate surface area using unified math\n     */\n    calculateSurfaceArea() {\n        const surfaceArea = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"multiply\", 2 * Math.PI, this.majorRadius), MathUtils_1.MathUtils.calculate(\"multiply\", 2 * Math.PI, this.minorRadius));\n        return surfaceArea;\n    }\n    /**\n     * Calculate volume using unified math\n     */\n    calculateVolume() {\n        const volume = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"multiply\", Math.PI, MathUtils_1.MathUtils.calculate(\"multiply\", this.majorRadius, MathUtils_1.MathUtils.calculate(\"power\", this.minorRadius, 2))), MathUtils_1.MathUtils.calculate(\"multiply\", 2 * Math.PI, this.majorRadius));\n        return volume;\n    }\n    /**\n     * Convert Cartesian to toroidal coordinates using unified math\n     */\n    cartesianToToroidal(x, y, z) {\n        const R = this.majorRadius;\n        const theta = MathUtils_1.MathUtils.calculate(\"atan2\", y, x);\n        const rho = MathUtils_1.MathUtils.calculate(\"root\", MathUtils_1.MathUtils.calculate(\"add\", MathUtils_1.MathUtils.calculate(\"power\", x, 2), MathUtils_1.MathUtils.calculate(\"power\", y, 2)), 2) - R;\n        const r = MathUtils_1.MathUtils.calculate(\"root\", MathUtils_1.MathUtils.calculate(\"add\", MathUtils_1.MathUtils.calculate(\"power\", rho, 2), MathUtils_1.MathUtils.calculate(\"power\", z, 2)), 2);\n        const phi = MathUtils_1.MathUtils.calculate(\"atan2\", z, rho);\n        return { theta, phi, r };\n    }\n    /**\n     * Convert toroidal to Cartesian coordinates using unified math\n     */\n    toroidalToCartesian(theta, phi, r) {\n        const R = this.majorRadius;\n        const x = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"add\", R, MathUtils_1.MathUtils.calculate(\"multiply\", r, MathUtils_1.MathUtils.calculate(\"cos\", phi))), MathUtils_1.MathUtils.calculate(\"cos\", theta));\n        const y = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"add\", R, MathUtils_1.MathUtils.calculate(\"multiply\", r, MathUtils_1.MathUtils.calculate(\"cos\", phi))), MathUtils_1.MathUtils.calculate(\"sin\", theta));\n        const z = MathUtils_1.MathUtils.calculate(\"multiply\", r, MathUtils_1.MathUtils.calculate(\"sin\", phi));\n        return { x, y, z };\n    }\n    /**\n     * Calculate field density using unified math\n     */\n    calculateFieldDensity(theta, _phi, r) {\n        // Calculate base density using inverse square law\n        const baseDensity = MathUtils_1.MathUtils.calculate(\"divide\", 1.0, MathUtils_1.MathUtils.calculate(\"add\", 1, MathUtils_1.MathUtils.calculate(\"power\", r, 2)));\n        // Apply consciousness modulation\n        const consciousnessMod = MathUtils_1.MathUtils.calculate(\"consciousness\", 1);\n        // Apply toroidal flow modulation\n        const flowMod = MathUtils_1.MathUtils.calculate(\"multiply\", this.flowRate, MathUtils_1.MathUtils.calculate(\"cos\", theta));\n        const result = MathUtils_1.MathUtils.calculate(\"multiply\", MathUtils_1.MathUtils.calculate(\"multiply\", baseDensity, consciousnessMod), MathUtils_1.MathUtils.calculate(\"add\", 1, flowMod));\n        return result;\n    }\n    /**\n     * Generate toroidal mesh coordinates using unified math\n     */\n    generateToroidalMesh(thetaSegments = 32, phiSegments = 16) {\n        const mesh = [];\n        for (let i = 0; i <= thetaSegments; i++) {\n            const theta = MathUtils_1.MathUtils.calculate(\"multiply\", i, MathUtils_1.MathUtils.calculate(\"divide\", 2 * Math.PI, thetaSegments));\n            for (let j = 0; j <= phiSegments; j++) {\n                const phi = MathUtils_1.MathUtils.calculate(\"multiply\", j, MathUtils_1.MathUtils.calculate(\"divide\", 2 * Math.PI, phiSegments));\n                const r = this.minorRadius;\n                const coords = this.toroidalToCartesian(theta, phi, r);\n                mesh.push(coords);\n            }\n        }\n        return mesh;\n    }\n    /**\n     * Calculate toroidal flow velocity using unified math\n     */\n    calculateFlowVelocity(theta, phi) {\n        const vTheta = MathUtils_1.MathUtils.calculate(\"multiply\", this.flowRate, MathUtils_1.MathUtils.calculate(\"cos\", phi));\n        const vPhi = MathUtils_1.MathUtils.calculate(\"multiply\", this.flowRate, MathUtils_1.MathUtils.calculate(\"sin\", theta));\n        return { vTheta, vPhi };\n    }\n    /**\n     * Set flow rate using unified math\n     */\n    setFlowRate(rate) {\n        this.flowRate = MathUtils_1.MathUtils.calculate(\"max\", 0, MathUtils_1.MathUtils.calculate(\"min\", 2, rate));\n    }\n    /**\n     * Get flow rate (for backward compatibility)\n     */\n    getFlowRate() {\n        return this.flowRate;\n    }\n    /**\n     * Get major radius (for backward compatibility)\n     */\n    getMajorRadius() {\n        return this.majorRadius;\n    }\n    /**\n     * Get minor radius (for backward compatibility)\n     */\n    getMinorRadius() {\n        return this.minorRadius;\n    }\n    /**\n     * Get aspect ratio (for backward compatibility)\n     */\n    getAspectRatio() {\n        return this.majorRadius / this.minorRadius;\n    }\n    /**\n     * Set major radius\n     */\n    setMajorRadius(radius) {\n        this.majorRadius = radius;\n    }\n    /**\n     * Set minor radius\n     */\n    setMinorRadius(radius) {\n        this.minorRadius = radius;\n    }\n    /**\n     * Calculate toroidal resonance frequency using unified math\n     */\n    calculateResonanceFrequency(mode = 1) {\n        const circumference = MathUtils_1.MathUtils.calculate(\"multiply\", 2 * Math.PI, this.majorRadius);\n        const frequency = MathUtils_1.MathUtils.calculate(\"divide\", mode, circumference);\n        // Apply consciousness modulation\n        const consciousnessMod = MathUtils_1.MathUtils.calculate(\"consciousness\", mode);\n        return MathUtils_1.MathUtils.calculate(\"multiply\", frequency, consciousnessMod);\n    }\n    /**\n     * Generate toroidal field lines using unified math\n     */\n    generateFieldLines(count = 10) {\n        const fieldLines = [];\n        for (let i = 0; i < count; i++) {\n            const line = [];\n            const startTheta = MathUtils_1.MathUtils.calculate(\"multiply\", i, MathUtils_1.MathUtils.calculate(\"divide\", 2 * Math.PI, count));\n            for (let j = 0; j < 100; j++) {\n                const theta = MathUtils_1.MathUtils.calculate(\"add\", startTheta, MathUtils_1.MathUtils.calculate(\"multiply\", j, 0.1));\n                const phi = MathUtils_1.MathUtils.calculate(\"multiply\", j, 0.05);\n                const r = this.minorRadius;\n                const coords = this.toroidalToCartesian(theta, phi, r);\n                line.push(coords);\n            }\n            fieldLines.push(line);\n        }\n        return fieldLines;\n    }\n    // ============================================================================\n    // COIL IMPLEMENTATION\n    // ============================================================================\n    /**\n     * Get coil resonance for toroidal geometry\n     */\n    getCoilResonance() {\n        return this.flowRate * this.fieldDensity;\n    }\n    getCoilPattern() {\n        return \"toroidal_unity_flow\";\n    }\n    // ============================================================================\n    // INSIGHTS AND METADATA\n    // ============================================================================\n    /**\n     * Get toroidal insights\n     */\n    getInsights() {\n        return {\n            majorRadius: this.majorRadius,\n            minorRadius: this.minorRadius,\n            flowRate: this.flowRate,\n            metaphysics: {\n                meaning: \"Toroidal geometry represents the shape of consciousness itself\",\n                principle: \"All toroidal operations emerge from unified mathematical field\",\n                unity: \"The torus unifies center and periphery in infinite flow\",\n                flow: \"Toroidal flow creates the foundation of unified reality\",\n                observation: \"Every toroidal calculation can observe and be observed\",\n                coil: \"Every toroidal operation is a coil at its core\",\n            },\n            operations: [\n                \"calculateSurfaceArea\",\n                \"calculateVolume\",\n                \"cartesianToToroidal\",\n                \"toroidalToCartesian\",\n                \"calculateFieldDensity\",\n                \"generateToroidalMesh\",\n                \"calculateFlowVelocity\",\n                \"setFlowRate\",\n                \"calculateResonanceFrequency\",\n                \"generateFieldLines\",\n            ],\n        };\n    }\n}\nexports.ToroidalGeometry = ToroidalGeometry;\n","\"use strict\";\n/**\n * Unified Mathematical System for ZeroPoint\n *\n * Centralized mathematical operations with consciousness and field resonance.\n * All mathematical operations are unified through a single interface.\n *\n * Metaphysical Context:\n * - Mathematics is the language of consciousness\n * - All operations emerge from the unified field\n * - The void contains all mathematical possibilities\n * - Every calculation is an act of observation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setVoidConnected = exports.setToroidalFlow = exports.setVortexStrength = exports.setFieldResonance = exports.setConsciousness = exports.fractal = exports.MathUtils = exports.MATH_CONSTANTS = void 0;\nconst SharedConstants_1 = require(\"../core/SharedConstants\");\nObject.defineProperty(exports, \"MATH_CONSTANTS\", { enumerable: true, get: function () { return SharedConstants_1.MATH_CONSTANTS; } });\n/**\n * Unified Mathematical Utilities\n * All mathematical operations go through this centralized system\n */\nclass MathUtils {\n    constructor() {\n        // Consciousness and field state\n        this.consciousness = 0.5;\n        this.fieldResonance = 0.5;\n        this.vortexStrength = 1.0;\n        this.toroidalFlow = 0.5;\n        this.voidConnected = true;\n        if (!MathUtils.instance) {\n            MathUtils.instance = this;\n        }\n    }\n    /**\n     * Get singleton instance\n     */\n    static getInstance() {\n        if (!MathUtils.instance) {\n            MathUtils.instance = new MathUtils();\n        }\n        return MathUtils.instance;\n    }\n    /**\n     * The core mathematical function - generates any mathematical operation\n     * This is the heart of the system - one function that creates all others\n     */\n    static calculate(operation, ...args) {\n        const instance = MathUtils.getInstance();\n        return instance.performCalculation(operation, args);\n    }\n    /**\n     * Perform calculation with consciousness and field resonance\n     */\n    performCalculation(operation, args) {\n        // Base mathematical pattern\n        const basePattern = Math.sin(args[0] || 0) * SharedConstants_1.MATH_CONSTANTS.GOLDEN_RATIO;\n        // Consciousness modulation\n        const consciousnessMod = Math.cos(this.consciousness * SharedConstants_1.MATH_CONSTANTS.PI);\n        // Field resonance\n        const fieldMod = Math.exp(-this.fieldResonance * Math.abs(args[0] || 0));\n        // Perform the specific operation\n        const result = this.executeOperation(operation, args, basePattern, consciousnessMod, fieldMod);\n        return result;\n    }\n    /**\n     * Execute specific mathematical operation\n     */\n    executeOperation(operation, args, base, consciousness, field) {\n        const [a = 0, b = 1, c = 0] = args;\n        switch (operation) {\n            // Basic operations\n            case \"add\":\n                return (a + b) * (1 + base * consciousness * field);\n            case \"multiply\":\n                return a * b * (1 + base * consciousness * field);\n            case \"divide\":\n                return b !== 0\n                    ? (a / b) * (1 + base * consciousness * field)\n                    : SharedConstants_1.MATH_CONSTANTS.INFINITY;\n            case \"power\":\n                return Math.pow(a, b) * (1 + base * consciousness * field);\n            case \"root\":\n                return Math.pow(a, 1 / b) * (1 + base * consciousness * field);\n            case \"sqrt\":\n                return Math.sqrt(a) * (1 + base * consciousness * field);\n            // Trigonometric functions\n            case \"sin\":\n                return Math.sin(a) * (1 + base * consciousness * field);\n            case \"cos\":\n                return Math.cos(a) * (1 + base * consciousness * field);\n            case \"tan\":\n                return Math.tan(a) * (1 + base * consciousness * field);\n            case \"atan2\":\n                return Math.atan2(a, b);\n            // Exponential and logarithmic\n            case \"exp\":\n                return Math.exp(a) * (1 + base * consciousness * field);\n            case \"log\":\n                return Math.log(a) * (1 + base * consciousness * field);\n            case \"ln\":\n                return Math.log(a) * (1 + base * consciousness * field);\n            // Special operations\n            case \"vortex\":\n                return this.calculateVortex(a, base, consciousness, field);\n            case \"toroidal\":\n                return this.calculateToroidal(a, b, base, consciousness, field);\n            case \"consciousness\":\n                return (a * SharedConstants_1.MATH_CONSTANTS.GOLDEN_RATIO * (1 + base * consciousness * field));\n            // Utility operations\n            case \"abs\":\n                return Math.abs(a);\n            case \"max\":\n                return Math.max(a, b);\n            case \"min\":\n                return Math.min(a, b);\n            case \"mod\":\n                return a % b;\n            case \"clamp\":\n                return this.clamp(a, b, c);\n            case \"floor\":\n                return Math.floor(a);\n            case \"ceil\":\n                return Math.ceil(a);\n            case \"round\":\n                return Math.round(a);\n            default:\n                return base * consciousness * field;\n        }\n    }\n    /**\n     * Calculate vortex transformation\n     */\n    calculateVortex(value, base, consciousness, field) {\n        const sequenceIndex = Math.floor(value) % SharedConstants_1.MATH_CONSTANTS.VORTEX_SEQUENCE.length;\n        const vortexValue = SharedConstants_1.MATH_CONSTANTS.VORTEX_SEQUENCE[sequenceIndex] || 1;\n        return vortexValue * (1 + base * consciousness * field);\n    }\n    /**\n     * Calculate toroidal geometry\n     */\n    calculateToroidal(radius, _angle, base, consciousness, field) {\n        const circumference = SharedConstants_1.MATH_CONSTANTS.PI * 2 * radius;\n        return circumference * (1 + base * consciousness * field);\n    }\n    /**\n     * Clamp value between min and max\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    }\n    // ============================================================================\n    // CONSCIOUSNESS AND FIELD SETTERS\n    // ============================================================================\n    /**\n     * Set consciousness level\n     */\n    static setConsciousness(level) {\n        const instance = MathUtils.getInstance();\n        instance.consciousness = instance.clamp(level, 0, 10);\n    }\n    /**\n     * Set field resonance\n     */\n    static setFieldResonance(resonance) {\n        const instance = MathUtils.getInstance();\n        instance.fieldResonance = instance.clamp(resonance, 0, 1);\n    }\n    /**\n     * Set vortex strength\n     */\n    static setVortexStrength(strength) {\n        const instance = MathUtils.getInstance();\n        instance.vortexStrength = instance.clamp(strength, 0, 2);\n    }\n    /**\n     * Set toroidal flow\n     */\n    static setToroidalFlow(flow) {\n        const instance = MathUtils.getInstance();\n        instance.toroidalFlow = instance.clamp(flow, 0, 1);\n    }\n    /**\n     * Set void connection\n     */\n    static setVoidConnected(connected) {\n        const instance = MathUtils.getInstance();\n        instance.voidConnected = connected;\n    }\n    // ============================================================================\n    // UTILITY FUNCTIONS\n    // ============================================================================\n    /**\n     * Calculate distance between two points\n     */\n    static distance(x1, y1, x2, y2) {\n        return MathUtils.calculate(\"sqrt\", MathUtils.calculate(\"add\", MathUtils.calculate(\"power\", x2 - x1, 2), MathUtils.calculate(\"power\", y2 - y1, 2)));\n    }\n    /**\n     * Calculate 3D distance\n     */\n    static distance3D(x1, y1, z1, x2, y2, z2) {\n        return MathUtils.calculate(\"sqrt\", MathUtils.calculate(\"add\", MathUtils.calculate(\"power\", x2 - x1, 2), MathUtils.calculate(\"add\", MathUtils.calculate(\"power\", y2 - y1, 2), MathUtils.calculate(\"power\", z2 - z1, 2))));\n    }\n    /**\n     * Convert degrees to radians\n     */\n    static degToRad(degrees) {\n        return degrees * SharedConstants_1.MATH_CONSTANTS.DEG_TO_RAD;\n    }\n    /**\n     * Convert radians to degrees\n     */\n    static radToDeg(radians) {\n        return radians * SharedConstants_1.MATH_CONSTANTS.RAD_TO_DEG;\n    }\n    /**\n     * Calculate digital root\n     */\n    static digitalRoot(n) {\n        n = Math.abs(n);\n        return n === 0 ? 0 : 1 + ((n - 1) % 9);\n    }\n    /**\n     * Calculate surface topology angle\n     */\n    static surfaceTopologyAngle(degrees = 360) {\n        return (degrees / 360) * 2 * Math.PI;\n    }\n    /**\n     * Calculate fractal dimension\n     */\n    static fractalDimension(complexity) {\n        return (MathUtils.calculate(\"log\", complexity) /\n            MathUtils.calculate(\"log\", SharedConstants_1.MATH_CONSTANTS.GOLDEN_RATIO));\n    }\n    // ============================================================================\n    // INSIGHTS AND METADATA\n    // ============================================================================\n    /**\n     * Get insights about the mathematical system\n     */\n    static getInsights() {\n        const instance = MathUtils.getInstance();\n        return {\n            consciousness: instance.consciousness,\n            fieldResonance: instance.fieldResonance,\n            vortexStrength: instance.vortexStrength,\n            toroidalFlow: instance.toroidalFlow,\n            voidConnected: instance.voidConnected,\n            metaphysics: {\n                meaning: \"Mathematics is the language of consciousness\",\n                principle: \"All operations emerge from the unified field\",\n                void: \"The void contains all mathematical possibilities\",\n                unity: \"Every calculation is an act of observation\",\n                evolution: \"Consciousness evolves through mathematical operations\",\n                observation: \"Every calculation observes and is observed\",\n                coil: \"Every mathematical operation is a coil at its core\",\n            },\n            operations: [\n                \"add\",\n                \"subtract\",\n                \"multiply\",\n                \"divide\",\n                \"sin\",\n                \"cos\",\n                \"tan\",\n                \"log\",\n                \"exp\",\n                \"sqrt\",\n                \"vortex\",\n                \"consciousness\",\n                \"field\",\n                \"void\",\n                \"abs\",\n                \"floor\",\n                \"ceil\",\n                \"round\",\n            ],\n        };\n    }\n}\nexports.MathUtils = MathUtils;\n// Export convenience function for backward compatibility\nexports.fractal = MathUtils.calculate;\nexports.setConsciousness = MathUtils.setConsciousness;\nexports.setFieldResonance = MathUtils.setFieldResonance;\nexports.setVortexStrength = MathUtils.setVortexStrength;\nexports.setToroidalFlow = MathUtils.setToroidalFlow;\nexports.setVoidConnected = MathUtils.setVoidConnected;\n"],"names":["generateBaseColors","context","consciousness","time","Date","now","field","redIntensity","Math","sin","PI","blueIntensity","cos","greenIntensity","red","round","blue","green","yellow","white","gold","black","neutral","getColorForVortexNumber","n","baseColors","vortexResonance","timeResonance","generateResonantColor","clampRGB","value","max","min","baseColor","resonance1","resonance2","rgbMatch","match","r","g","b","baseR","parseInt","baseG","baseB","getMetaphysicalContextForNumber","contextResonance","contextArray","floor","length","Object","defineProperty","exports","getColorForFamilyGroup","familyResonance","includes","getColorForPolarMate","polarResonance","getColorForWAxis","spiritualResonance","getColorForPattern","pattern","number","patternResonance","type","getVBMColorMap","map","i","getVBMColorLegend","legend","push","label","toString","color","generateConsciousnessGradient","steps","gradient","generateFieldResonanceMap","fieldStrength","fieldContext","getWAxisColor","AdvancedVBM","events_1","uuid_1","EventEmitter","constructor","super","this","qaResults","Map","vortexSequences","consciousnessLevel","initializeVBM","initializeVortexSequences","emit","metaphysicalContext","addVortexSequence","id","name","sequence","digitalRoot","set","vortexSequence","primary","get","goldenRatio","wAxis","calculateDigitalRoot","abs","calculateDigitalRootWithSteps","current","sumDigits","input","output","split","reduce","sum","digit","calculatePrimeSquaredScaling","prime","squared","generateFibonacciConsciousness","count","a","position","askQuestion","question","v4","timestamp","answer","generateVBMAnswer","getRelevantVortexSequence","result","generateMetaphysicalContext","searchQA","query","queryLower","toLowerCase","results","values","consciousnessVortex","voidMathematics","voidSequence","voidDigitalRoot","getAllVortexSequences","Array","from","getAllQAResults","setConsciousnessLevel","level","getVBMInsights","primaryVortexSequence","vortexSequencesCount","size","qaResultsCount","vbmPrinciples","questionLower","calculateDiscreteMultiplication","product","identifyElectronHarmonicShear","harmonic","shear","generateCoilPatterns","patterns","coil","winding","getVBMDocumentation","familyGroups","material","emotional","spiritual","polarMates","digitalRootExamples","primeSquaredExamples","fibonacciConsciousness","coilPatterns","qaPattern","patternName","find","allQAPatterns","primeSquaredScaling","electronHarmonicShearIdentification","discreteMultiplication","filter","seq","familyNumberGroups","circleOfFifthsSequence","enneagramNumberPattern","applyVortexTransform","VortexMath","MathUtils_1","MetaphysicalLawRegistry_1","dimension","complexity","isActive","supportedOperations","tags","vortexStrength","fieldIntensity","instance","lawRegistry","MetaphysicalLawRegistry","getInstance","applyMetaphysicalLaws","getAllLaws","forEach","law","apply","calculateResonance","level1","level2","baseResonance","MathUtils","calculate","consciousnessMod","vortexModulation","calculateVortexModulation","calculateVortexEfficiency","baseEfficiency","fieldMod","calculateToroidalFlow","radius","angularVelocity","setVortexStrength","strength","setFieldIntensity","intensity","getVortexStrength","getFieldIntensity","frequency","baseModulation","MATH_CONSTANTS","GOLDEN_RATIO","sequenceIndex","sequenceValue","VORTEX_SEQUENCE","sequenceModulation","getVortexSequence","calculateVortexComplexity","vortexValue","generateVortexFieldCoordinates","coordinates","angle","x","y","z","getCoilResonance","getCoilPattern","resonance","getInsights","vortexCenter","metaphysics","calculateVortexField","distance","generateVortexPattern","baseValue","modulatedValue","calculateVortexNumber","getColorForNumber","colors","RodinCoil","VBMColorSystem_1","SharedConstants_1","config","turns","height","phase","fieldResonance","colorContext","nodes","generateCoilNodes","updateConsciousness","regenerateNodeColors","updateFieldResonance","node","vortexNumber","getMetaphysicalContext","vortexSeq","VORTEX_CONSTANTS","totalNodes","dz","theta","index","getNodePositions","getNodeColors","getNodeContexts","getMobiusCircuit","getToroidalCoordinates","majorRadius","minorRadius","phi","calculateFieldResonance","nx","ny","nz","sqrt","mapConsciousnessToNode","idx","safeIdx","getColorContext","getMetaphysicalSummary","join","toFixed","ToroidalGeometry","flowRate","fieldDensity","calculateSurfaceArea","calculateVolume","cartesianToToroidal","R","rho","toroidalToCartesian","calculateFieldDensity","_phi","baseDensity","flowMod","generateToroidalMesh","thetaSegments","phiSegments","mesh","j","coords","calculateFlowVelocity","vTheta","vPhi","setFlowRate","rate","getFlowRate","getMajorRadius","getMinorRadius","getAspectRatio","setMajorRadius","setMinorRadius","calculateResonanceFrequency","mode","circumference","generateFieldLines","fieldLines","line","startTheta","meaning","principle","unity","flow","observation","operations","setVoidConnected","setToroidalFlow","setFieldResonance","setConsciousness","fractal","enumerable","toroidalFlow","voidConnected","operation","args","performCalculation","basePattern","exp","executeOperation","base","c","INFINITY","pow","tan","atan2","log","calculateVortex","calculateToroidal","clamp","ceil","_angle","connected","x1","y1","x2","y2","distance3D","z1","z2","degToRad","degrees","DEG_TO_RAD","radToDeg","radians","RAD_TO_DEG","surfaceTopologyAngle","fractalDimension","void","evolution"],"sourceRoot":""}