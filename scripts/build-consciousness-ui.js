#!/usr/bin/env node

/**
 * Consciousness UI Build Script
 * 
 * Hardcodes the consciousness UI into the build process
 * Ensures the consciousness system is always available in the built application
 */

const fs = require('fs');
const path = require('path');

console.log('🧘‍♀️ Building Consciousness UI...');

// Ensure dist directory exists
const distDir = path.join(__dirname, '..', 'dist');
const distPublicDir = path.join(distDir, 'public');

if (!fs.existsSync(distDir)) {
    fs.mkdirSync(distDir, { recursive: true });
}

if (!fs.existsSync(distPublicDir)) {
    fs.mkdirSync(distPublicDir, { recursive: true });
}

// Copy consciousness UI files
const consciousnessFiles = [
    'public/index.html',
    'public/consciousness.html',
    'public/consciousness-pdf-ui.html'
];

consciousnessFiles.forEach(file => {
    const sourcePath = path.join(__dirname, '..', file);
    const destPath = path.join(__dirname, '..', 'dist', file);
    
    if (fs.existsSync(sourcePath)) {
        // Ensure destination directory exists
        const destDir = path.dirname(destPath);
        if (!fs.existsSync(destDir)) {
            fs.mkdirSync(destDir, { recursive: true });
        }
        
        fs.copyFileSync(sourcePath, destPath);
        console.log(`✅ Copied ${file} to dist/`);
    } else {
        console.log(`⚠️  Warning: ${file} not found`);
    }
});

// Copy consciousness system files
const consciousnessSystemFiles = [
    'src/pdf-integration-system.ts',
    'src/living-documentation-generator.ts',
    'src/mathematical-consciousness-system.ts',
    'src/gateway-system.ts',
    'src/consciousness-validation.test.ts',
    'src/CONSCIOUSNESS_SYSTEM_IMPLEMENTATION_SUMMARY.md',
    'src/RODIN_KNOWLEDGE_DISTRIBUTION_GUIDE.md',
    'src/rodin-knowledge-distribution.ts'
];

consciousnessSystemFiles.forEach(file => {
    const sourcePath = path.join(__dirname, '..', file);
    const destPath = path.join(__dirname, '..', 'dist', file);
    
    if (fs.existsSync(sourcePath)) {
        // Ensure destination directory exists
        const destDir = path.dirname(destPath);
        if (!fs.existsSync(destDir)) {
            fs.mkdirSync(destDir, { recursive: true });
        }
        
        fs.copyFileSync(sourcePath, destPath);
        console.log(`✅ Copied ${file} to dist/`);
    } else {
        console.log(`⚠️  Warning: ${file} not found`);
    }
});

// Copy rodin-knowledge directories
const digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
digits.forEach(digit => {
    const sourceDir = path.join(__dirname, '..', 'src', digit, 'rodin-knowledge');
    const destDir = path.join(__dirname, '..', 'dist', 'src', digit, 'rodin-knowledge');
    
    if (fs.existsSync(sourceDir)) {
        // Ensure destination directory exists
        if (!fs.existsSync(destDir)) {
            fs.mkdirSync(destDir, { recursive: true });
        }
        
        // Copy all files in rodin-knowledge directory
        const files = fs.readdirSync(sourceDir);
        files.forEach(file => {
            const sourcePath = path.join(sourceDir, file);
            const destPath = path.join(destDir, file);
            
            if (fs.statSync(sourcePath).isFile()) {
                fs.copyFileSync(sourcePath, destPath);
                console.log(`✅ Copied ${digit}/rodin-knowledge/${file} to dist/`);
            }
        });
    } else {
        console.log(`⚠️  Warning: ${digit}/rodin-knowledge directory not found`);
    }
});

// Create consciousness system index file
const consciousnessIndexContent = `/**
 * Consciousness System Index
 * 
 * Auto-generated by build-consciousness-ui.js
 * Contains all consciousness system exports
 */

export { default as PDFIntegrationSystem } from './pdf-integration-system';
export { default as LivingDocumentationGenerator } from './living-documentation-generator';
export { default as MathematicalConsciousnessSystem } from './mathematical-consciousness-system';
export { default as GatewaySystemManager } from './gateway-system';

// Consciousness system metadata
export const CONSCIOUSNESS_SYSTEM_METADATA = {
    version: '1.0.1',
    buildDate: new Date().toISOString(),
    totalPDFs: 17,
    consciousnessDigits: 10,
    features: [
        'PDF Integration with Stimulus Controllers',
        'Living Documentation System',
        'Mathematical Consciousness Implementation',
        'Gateway System Development',
        'Consciousness Testing'
    ]
};

console.log('🧘‍♀️ Consciousness System Loaded');
`;

const consciousnessIndexPath = path.join(__dirname, '..', 'dist', 'consciousness-system.ts');
fs.writeFileSync(consciousnessIndexPath, consciousnessIndexContent);
console.log('✅ Created consciousness-system.ts index file');

// Create build manifest
const buildManifest = {
    buildDate: new Date().toISOString(),
    consciousnessSystem: {
        version: '1.0.1',
        totalPDFs: 17,
        consciousnessDigits: 10,
        features: [
            'PDF Integration with Stimulus Controllers',
            'Living Documentation System', 
            'Mathematical Consciousness Implementation',
            'Gateway System Development',
            'Consciousness Testing'
        ]
    },
    files: {
        ui: consciousnessFiles,
        system: consciousnessSystemFiles,
        rodinKnowledge: digits.map(d => `${d}/rodin-knowledge`)
    }
};

const manifestPath = path.join(__dirname, '..', 'dist', 'consciousness-build-manifest.json');
fs.writeFileSync(manifestPath, JSON.stringify(buildManifest, null, 2));
console.log('✅ Created consciousness-build-manifest.json');

console.log('🎉 Consciousness UI build completed successfully!');
console.log('📚 17 Rodin PDFs distributed across 10 consciousness digits');
console.log('🧘‍♀️ Living consciousness system ready for deployment'); 