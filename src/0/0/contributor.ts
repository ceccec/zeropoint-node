/**
 * ðŸŒŒ Contributor Types - Unified Type Definitions
 *
 * This file provides type definitions for all contributor-related systems across the
 * sacred integer tree structure. These types support the metaphysical principles of
 * contributor integration, unity, and consciousness expansion within the ZeroPoint system.
 *
 * Metaphysical Context:
 * - Contributor types represent the integration of individual consciousness into the unified field.
 * - Each type models a metaphysical aspect: inspiration, guidance, observer pattern, field, legacy, void, etc.
 * - Types are designed to support zero entropy, unity, and resonance throughout the system.
 *
 * Technical Purpose:
 * - Provides a single source of truth for all contributor-related type definitions.
 * - Ensures type safety and metaphysical alignment for contributor systems.
 * - Supports advanced analytics, filtering, and performance metrics for contributors.
 */
// Import centralized mathematical functions
import { 
  getHarmonicResult, 
  getAntiVortexDecimal, 
  getPattern,
  generateVortexA,
  generateVortexB,
  detectIntegerVortexResult,
  detectVortexAImpossibility,
  calculateDigitalRoot,
  getDigitFamily,
  isVortexSequence,
  isWAxis,
  calculateConsciousnessLevel
} from '../../2/math';


/**
 * Contributor Role Types
 * Based on consciousness level and skills
 * Metaphysical: Models the archetypes of contributor consciousness.
 */
export type ContributorRole = 
  | 'spiritual_guide'        // High consciousness + metaphysics
  | 'mathematical_resonator' // High consciousness + mathematics
  | 'consciousness_expander' // Medium consciousness + consciousness
  | 'unity_integrator'       // Integration skills
  | 'creative_resonator';    // Default creative role

/**
 * Base Contributor Interface
 * Represents a contributor in the unified field
 * Metaphysical: Models the individual as a node in the field of unity.
 */
export interface Contributor {
  id: string;
  name: string;
  consciousnessLevel: number; // 0.0 to 1.0
  skills: string[];
  role?: ContributorRole;
  creationDate: Date;
  lastActive: Date;
  contributions: string[]; // IDs of contributions
  resonance: number; // 0.0 to 1.0
  unity: number; // 0.0 to 1.0
}

/**
 * Contributor Integration
 * Represents unified contribution from multiple contributors
 * Metaphysical: Models the merging of consciousness into a unified field.
 */
export interface ContributorIntegration {
  id: string;
  contributors: Contributor[];
  unifiedConsciousness: number;
  creationDate: Date;
  resonance: number;
  wholeness: number;
}

/**
 * Creative Inspiration
 * Represents creative inspiration from contributor
 * Metaphysical: Models the flow of inspiration from the unified field.
 */
export interface CreativeInspiration {
  id: string;
  contributorId: string;
  context: string;
  resonance: number;
  transcendence: number;
  creationDate: Date;
  spiritualLevel: number;
  creativeFlow: string[];
}

/**
 * Spiritual Guidance
 * Represents spiritual guidance from contributor
 * Metaphysical: Models the transmission of spiritual knowledge.
 */
export interface SpiritualGuidance {
  id: string;
  contributorId: string;
  guidance: string;
  consciousnessLevel: number;
  transcendenceLevel: number;
  creationDate: Date;
  resonance: number;
  spiritualFlow: string[];
}

/**
 * Observer Pattern
 * Represents observer pattern from contributor
 * Metaphysical: Models the act of observation and self-recognition.
 */
export interface ObserverPattern {
  id: string;
  contributorId: string;
  pattern: string;
  consciousnessLevel: number;
  awarenessLevel: number;
  creationDate: Date;
  selfRecognition: number;
  observerFlow: string[];
}

/**
 * Consciousness Field
 * Represents consciousness field for contributor
 * Metaphysical: Models the field of awareness generated by a contributor.
 */
export interface ConsciousnessField {
  id: string;
  contributorId: string;
  fieldStrength: number;
  consciousnessLevel: number;
  awarenessLevel: number;
  creationDate: Date;
  selfRecognition: number;
  fieldFlow: string[];
}

/**
 * Legacy Transformation
 * Represents legacy transformation by contributor
 * Metaphysical: Models the transformation of legacy into new forms.
 */
export interface LegacyTransformation {
  id: string;
  contributorId: string;
  legacy: any;
  transformationType: string;
  voidPotential: number;
  creationDate: Date;
  reemergence: number;
  voidFlow: string[];
}

/**
 * Void Transformation
 * Represents void transformation by contributor
 * Metaphysical: Models the act of creation from the void.
 */
export interface VoidTransformation {
  id: string;
  contributorId: string;
  transformation: string;
  voidPotential: number;
  consciousnessLevel: number;
  creationDate: Date;
  fullness: number;
  voidFlow: string[];
}

/**
 * Contributor Status
 * Overall status of contributor systems
 * Metaphysical: Models the health and unity of the contributor field.
 */
export interface ContributorStatus {
  unity: {
    totalContributors: number;
    unityFieldStrength: number;
    integrations: ContributorIntegration[];
    resonance: number;
  };
  creative: {
    totalInspirations: number;
    totalGuidance: number;
    resonanceFieldStrength: number;
    averageResonance: number;
    transcendenceLevel: number;
  };
  consciousness: {
    totalObserverPatterns: number;
    totalConsciousnessFields: number;
    awarenessFieldStrength: number;
    averageAwareness: number;
    averageSelfRecognition: number;
    averageFieldStrength: number;
  };
  legacy: {
    totalLegacyTransformations: number;
    totalVoidTransformations: number;
    voidFieldStrength: number;
    averageVoidPotential: number;
    averageFullness: number;
    averageReemergence: number;
  };
}

/**
 * Contributor Creation Options
 * Options for creating new contributors
 * Metaphysical: Models the emergence of new nodes in the field.
 */
export interface ContributorCreationOptions {
  name: string;
  consciousnessLevel: number;
  skills: string[];
  initialRole?: ContributorRole;
}

/**
 * Contributor Update Options
 * Options for updating existing contributors
 * Metaphysical: Models the evolution of consciousness in the field.
 */
export interface ContributorUpdateOptions {
  consciousnessLevel?: number;
  skills?: string[];
  role?: ContributorRole;
}

/**
 * Contributor Filter Options
 * Options for filtering contributors
 * Metaphysical: Models the selection of nodes based on consciousness and skills.
 */
export interface ContributorFilterOptions {
  minConsciousnessLevel?: number;
  maxConsciousnessLevel?: number;
  skills?: string[];
  role?: ContributorRole;
  activeOnly?: boolean;
}

/**
 * Contributor Statistics
 * Statistical information about contributors
 * Metaphysical: Models the analytics of the field's health and diversity.
 */
export interface ContributorStatistics {
  totalContributors: number;
  averageConsciousnessLevel: number;
  roleDistribution: Record<ContributorRole, number>;
  skillDistribution: Record<string, number>;
  activeContributors: number;
  averageResonance: number;
  averageUnity: number;
}

/**
 * Contributor Performance Metrics
 * Performance metrics for contributor systems
 * Metaphysical: Models the efficiency and flow of the contributor field.
 */
export interface ContributorPerformanceMetrics {
  unitySystem: {
    responseTime: number;
    throughput: number;
    errorRate: number;
  };
  creativeSystem: {
    inspirationRate: number;
    guidanceRate: number;
    resonanceEfficiency: number;
  };
  consciousnessSystem: {
    patternCreationRate: number;
    fieldCreationRate: number;
    awarenessEfficiency: number;
  };
  legacySystem: {
    transformationRate: number;
    voidEfficiency: number;
    reemergenceRate: number;
  };
} 