// a432.trinity.visual.ts
// Visualizes trinity interaction as a harmonic, animated SVG stream for the A432 system
// All logic is self-contained, integer/fractional, and metaphysically mapped

/**
 * renderTrinityInteraction: Returns HTML/SVG string visualizing trinity (3, 6, 9) interaction
 * Shows three nodes cycling, folding, and harmonizing in a vortex pattern
 * Now includes: sound feedback, color harmonics, meta-observation, UI integration, and metaphysical overlays
 */
export function renderTrinityInteraction(vortexStream?: any): string {
  return [
    '<div id="trinity-container" style="display:flex;flex-direction:column;align-items:center;">',
    '<h2 style="color:#8ff;">Trinity Interaction (3, 6, 9)</h2>',
    '<svg id="trinity-svg" width="320" height="320" style="background:#111;border-radius:12px;">',
    '  <circle id="node3" cx="160" cy="60" r="28" fill="#39f" stroke="#fff" stroke-width="3" />',
    '  <text x="160" y="66" text-anchor="middle" font-size="20" fill="#fff">3</text>',
    '  <circle id="node6" cx="60" cy="220" r="28" fill="#6f3" stroke="#fff" stroke-width="3" />',
    '  <text x="60" y="226" text-anchor="middle" font-size="20" fill="#fff">6</text>',
    '  <circle id="node9" cx="260" cy="220" r="28" fill="#f93" stroke="#fff" stroke-width="3" />',
    '  <text x="260" y="226" text-anchor="middle" font-size="20" fill="#fff">9</text>',
    '  <polyline id="cycle-path" points="160,60 60,220 260,220 160,60" fill="none" stroke="#0ff" stroke-width="4" stroke-dasharray="8,6" />',
    '</svg>',
    '<div style="margin-top:12px;">',
    '  <button id="cycle-btn" style="background:#222;color:#8ff;padding:6px 18px;border-radius:6px;border:none;font-weight:bold;">Cycle</button>',
    '  <button id="fold-btn" style="background:#222;color:#ff8;padding:6px 18px;border-radius:6px;border:none;font-weight:bold;margin-left:8px;">Fold</button>',
    '  <button id="meta-btn" style="background:#222;color:#f8f;padding:6px 18px;border-radius:6px;border:none;font-weight:bold;margin-left:8px;">Meta-Observe</button>',
    '  <button id="overlay-btn" style="background:#222;color:#0ff;padding:6px 18px;border-radius:6px;border:none;font-weight:bold;margin-left:8px;">Toggle Overlay</button>',
    '  <span id="trinity-meta" style="margin-left:16px;color:#fff;font-size:16px;"></span>',
    '</div>',
    '<div id="meta-panel" style="display:none;margin-top:16px;width:90%;max-width:400px;background:#222;border-radius:8px;padding:12px;min-height:60px;color:#fff;font-size:14px;overflow-y:auto;max-height:120px;"></div>',
    '<div id="overlay-panel" style="display:none;margin-top:10px;width:90%;max-width:400px;background:#1a1a2a;border-radius:8px;padding:10px;color:#ff8;font-size:15px;">',
    '  <b>Metaphysical Overlay</b><br>',
    '  <span id="overlay-content"></span>',
    '</div>',
    '<script>',
    'const nodes = [',
    '  { id: "node3", x: 160, y: 60, value: 3, color: "#39f", freq: 432, meta: "Creation: The generative act, the beginning of the stream." },',
    '  { id: "node6", x: 60, y: 220, value: 6, color: "#6f3", freq: 648, meta: "Return: The harmonic return, the balancing of the stream." },',
    '  { id: "node9", x: 260, y: 220, value: 9, color: "#f93", freq: 972, meta: "Axis: The axis of unity, the self-aware observer." }',
    '];',
    'let state = 0;',
    'let metaLog = [];',
    'let overlayOn = false;',
    'function updateMeta() {',
    '  const sum = nodes.reduce((acc, n) => acc + n.value, 0);',
    '  const digitalRoot = sum % 9 === 0 ? 9 : sum % 9;',
    '  document.getElementById("trinity-meta").textContent = `Sum: ${sum}, Digital Root: ${digitalRoot}`;',
    '}',
    '// --- Sound logic (Web Audio API, harmonic frequencies) ---',
    'let ctx, osc;',
    'function playSound(freq) {',
    '  if (!window.AudioContext) return;',
    '  if (!ctx) ctx = new window.AudioContext();',
    '  if (osc) { osc.stop(); osc.disconnect(); }',
    '  osc = ctx.createOscillator();',
    '  osc.type = "sine";',
    '  osc.frequency.value = freq;',
    '  osc.connect(ctx.destination);',
    '  osc.start();',
    '  osc.stop(ctx.currentTime + 0.18);',
    '}',
    '// --- Color harmonics ---',
    'function animateColors() {',
    '  nodes.forEach((n, i) => {',
    '    const el = document.getElementById(n.id);',
    '    let hue = (n.value * 40 + state * 60) % 360;',
    '    el.setAttribute("fill", `hsl(${hue},70%,55%)`);',
    '  });',
    '}',
    '// --- Metaphysical overlays ---',
    'function updateOverlay(content) {',
    '  document.getElementById("overlay-content").textContent = content;',
    '}',
    'function showOverlay(content) {',
    '  document.getElementById("overlay-panel").style.display = "block";',
    '  updateOverlay(content);',
    '  overlayOn = true;',
    '}',
    'function hideOverlay() {',
    '  document.getElementById("overlay-panel").style.display = "none";',
    '  overlayOn = false;',
    '}',
    'function toggleOverlay() {',
    '  if (overlayOn) { hideOverlay(); } else {',
    '    const content = nodes.map(n => `${n.value}: ${n.meta}`).join("\n");',
    '    showOverlay(content);',
    '  }',
    '}',
    '// --- Meta-observation ---',
    'function logMeta(event, extra) {',
    '  const time = new Date().toLocaleTimeString();',
    '  const entry = `[${time}] ${event} | State: [${nodes.map(n=>n.value).join(", ")}]` + (extra ? ` | ${extra}` : "");',
    '  metaLog.push(entry);',
    '  if (metaLog.length > 10) metaLog = metaLog.slice(-10);',
    '  document.getElementById("meta-panel").innerText = metaLog.join("\n");',
    '}',
    'function cycleTrinity() {',
    '  state = (state + 1) % 3;',
    '  const v = nodes.pop(); nodes.unshift(v);',
    '  const pos = [',
    '    { x: 160, y: 60 },',
    '    { x: 60, y: 220 },',
    '    { x: 260, y: 220 }',
    '  ];',
    '  nodes.forEach((n, i) => {',
    '    const el = document.getElementById(n.id);',
    '    el.setAttribute("cx", pos[i].x);',
    '    el.setAttribute("cy", pos[i].y);',
    '    let hue = (n.value * 40 + state * 60) % 360;',
    '    el.setAttribute("fill", `hsl(${hue},70%,55%)`);',
    '    const text = document.querySelector(`text[x=\"${el.getAttribute("cx") }\"][y=\"${parseInt(el.getAttribute("cy"))+6}\"]`);',
    '    if(text) text.textContent = n.value;',
    '  });',
    '  document.getElementById("cycle-path").setAttribute("points", pos.map(p => `${p.x},${p.y}`).join(" ") + " " + `${pos[0].x},${pos[0].y}`);',
    '  updateMeta();',
    '  playSound(nodes[0].freq);',
    '  animateColors();',
    '  logMeta("Cycle", nodes.map(n => n.meta).join(" | "));',
    (typeof vortexStream !== 'undefined' ? '  if(window.vortexStreamUpdate) window.vortexStreamUpdate(nodes.map(n=>n.value));' : ''),
    '}',
    'function foldTrinity() {',
    '  nodes.forEach(n => {',
    '    const el = document.getElementById(n.id);',
    '    el.setAttribute("cx", 160);',
    '    el.setAttribute("cy", 140);',
    '    el.setAttribute("fill", "#fff");',
    '  });',
    '  document.getElementById("cycle-path").setAttribute("points", "160,140 160,140 160,140 160,140");',
    '  document.getElementById("trinity-meta").textContent = "Folded: Unity (Digital Root: 9)";',
    '  playSound(864);',
    '  logMeta("Fold", "Unity: All trinity states merged. Axis of consciousness.");',
    '  if (overlayOn) showOverlay("Unity: All trinity states merged. Axis of consciousness.");',
    '}',
    'document.getElementById("cycle-btn").onclick = cycleTrinity;',
    'document.getElementById("fold-btn").onclick = foldTrinity;',
    'document.getElementById("meta-btn").onclick = function() {',
    '  const panel = document.getElementById("meta-panel");',
    '  panel.style.display = panel.style.display === "block" ? "none" : "block";',
    '};',
    'document.getElementById("overlay-btn").onclick = toggleOverlay;',
    'updateMeta();',
    'animateColors();',
    'logMeta("Init", nodes.map(n => n.meta).join(" | "));',
    '</script>',
    '</div>'
  ].join('\n');
}

/**
 * injectTrinityVisualization: Injects the trinity visualization into a DOM element by id
 */
export function injectTrinityVisualization(targetId: string, vortexStream?: any) {
  const el = document.getElementById(targetId);
  if (el) el.innerHTML = renderTrinityInteraction(vortexStream);
} 